{"version":3,"sources":["webpack://_N_E/./components/CategoryList/styles.tsx","webpack://_N_E/./components/CategoryList/index.tsx"],"names":["CheckBoxContainer","styled","fieldset","ColorAni","CategoryList","mainCategories","setCategories","categories","onChangeCheckBox","useCallback","name","e","length","target","checked","prev","filter","v","alert","map","category","includes","type","id","onChange","defaultChecked","htmlFor"],"mappings":"2KAGaA,EAAoBC,IAAOC,SAAV,4EAAGD,CAAH,6LAYTE,KC8CNC,UAnDf,YAIsB,IAHpBC,EAGoB,EAHpBA,eACAC,EAEoB,EAFpBA,cACAC,EACoB,EADpBA,WAEMC,EAAmBC,uBACvB,SAACC,GAAD,OAAkB,SAACC,GACbJ,EAAWK,OAAS,EAClBD,EAAEE,OAAOC,QACXR,GAAc,SAAAS,GAAI,4BAAQA,GAAR,CAAcL,OAEhCJ,GAAc,SAAAS,GAAI,OAAI,YAAIA,GAAMC,QAAO,SAAAC,GAAC,OAAIA,GAAKP,QAG/CC,EAAEE,OAAOC,SACXI,MAAM,oEACNP,EAAEE,OAAOC,SAAU,GAEnBR,GAAc,SAAAS,GAAI,OAAI,YAAIA,GAAMC,QAAO,SAAAC,GAAC,OAAIA,GAAKP,WAIvD,CAACH,IAGH,OACE,cAACP,EAAD,UACGK,GACCA,EAAec,KAAI,SAAAC,GAAQ,OACzB,gCACGb,EAAWc,SAASD,EAASV,MAC5B,uBACEY,KAAK,WACLC,GAAIH,EAASV,KACbc,SAAUhB,EAAiBY,EAASV,MACpCe,gBAAc,IAGhB,uBACEH,KAAK,WACLC,GAAIH,EAASV,KACbc,SAAUhB,EAAiBY,EAASV,QAGxC,uBAAOgB,QAASN,EAASV,KAAzB,SAAgCU,EAASV,SAfjCU,EAASV","file":"static/chunks/41.671c2179a81185ae4042.js","sourcesContent":["import styled from 'styled-components';\nimport { ColorAni } from 'utils/stylesUtil';\n\nexport const CheckBoxContainer = styled.fieldset`\n  margin: 0.5rem 0;\n  display: grid;\n  grid-template-columns: repeat(5, 85px);\n  grid-template-rows: auto;\n\n  div {\n    label {\n      color: #fff;\n      margin-left: 4px;\n      :hover {\n        color: coral;\n        animation: ${ColorAni} 0.5s infinite linear;\n      }\n    }\n  }\n`;\n","import { ICategory } from 'interfaces/db';\nimport React, { Dispatch, SetStateAction, useCallback } from 'react';\nimport { CheckBoxContainer } from './styles';\n\ninterface CategoryListProps {\n  mainCategories: ICategory[];\n  setCategories: Dispatch<SetStateAction<string[]>>;\n  categories: string[];\n}\n\nfunction CategoryList({\n  mainCategories,\n  setCategories,\n  categories,\n}: CategoryListProps) {\n  const onChangeCheckBox = useCallback(\n    (name: string) => (e: any) => {\n      if (categories.length < 5) {\n        if (e.target.checked) {\n          setCategories(prev => [...prev, name]);\n        } else {\n          setCategories(prev => [...prev].filter(v => v != name));\n        }\n      } else {\n        if (e.target.checked) {\n          alert('5개만 선택할 수 있습니다');\n          e.target.checked = false;\n        } else {\n          setCategories(prev => [...prev].filter(v => v != name));\n        }\n      }\n    },\n    [categories]\n  );\n\n  return (\n    <CheckBoxContainer>\n      {mainCategories &&\n        mainCategories.map(category => (\n          <div key={category.name}>\n            {categories.includes(category.name) ? (\n              <input\n                type=\"checkbox\"\n                id={category.name}\n                onChange={onChangeCheckBox(category.name)}\n                defaultChecked\n              />\n            ) : (\n              <input\n                type=\"checkbox\"\n                id={category.name}\n                onChange={onChangeCheckBox(category.name)}\n              />\n            )}\n            <label htmlFor={category.name}>{category.name}</label>\n          </div>\n        ))}\n    </CheckBoxContainer>\n  );\n}\n\nexport default CategoryList;\n"],"sourceRoot":""}