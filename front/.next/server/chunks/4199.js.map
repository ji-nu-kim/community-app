{"version":3,"sources":["webpack://front/./components/PostForm.tsx","webpack://front/./hooks/useInput.tsx"],"names":["StyleButton","styled","Button","PostForm","router","useRouter","imagePaths","addPostDone","useSelector","state","post","dispatch","useDispatch","text","onChangeText","setText","useInput","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","addPostRequestAction","communityId","Number","query","id","imageInputRef","useRef","onClickImageUpload","current","click","onChangeImages","e","imageFormData","call","target","files","f","uploadImagesRequestAction","onRemoveImage","removeImage","height","display","justifyContent","flexDirection","marginBottom","map","v","i","marginRight","background","replace","width","color","border","resize","textAlign","marginTop","marginLeft","memo","initialValue","value","setValue","useState","handler"],"mappings":"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","file":"4199.js","sourcesContent":["import {\n  addPostRequestAction,\n  removeImage,\n  uploadImagesRequestAction,\n} from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { Button, Form, Input } from 'antd';\nimport React, { ChangeEvent, memo, useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootStateInterface } from '../interfaces/RootState';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\n\nconst StyleButton = styled(Button)`\n  background: none;\n  border: none;\n  position: absolute;\n  margin-left: -35px;\n  color: #fff;\n  margin-top: -5px;\n\n  :hover {\n    background: none;\n    color: #039be5;\n  }\n`;\n\nfunction PostForm() {\n  const router = useRouter();\n  const { imagePaths, addPostDone } = useSelector(\n    (state: RootStateInterface) => state.post\n  );\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput<string>('');\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요');\n    }\n    const formData = new FormData();\n    imagePaths.forEach(p => formData.append('image', p));\n    formData.append('content', text);\n    return dispatch(\n      addPostRequestAction({ formData, communityId: Number(router.query.id) })\n    );\n  }, [text, imagePaths]);\n\n  const imageInputRef = useRef<HTMLInputElement>(null);\n  const onClickImageUpload = useCallback(() => {\n    imageInputRef.current?.click();\n  }, [imageInputRef.current]);\n\n  const onChangeImages = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    return dispatch(uploadImagesRequestAction(imageFormData));\n  }, []);\n\n  const onRemoveImage = useCallback(\n    (id: number) => () => {\n      return dispatch(removeImage(id));\n    },\n    []\n  );\n\n  return (\n    <Form\n      style={{\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      {imagePaths && (\n        <div\n          style={{\n            display: 'flex',\n            marginBottom: '1rem',\n          }}\n        >\n          {imagePaths.map((v, i) => (\n            <div key={v} style={{ marginRight: '1rem', background: 'rgba(0,0,0,.7)' }}>\n              <img\n                src={v.replace(/\\/resize\\//, '/original/')}\n                style={{ width: '100px' }}\n                alt={v}\n              />\n              <StyleButton onClick={onRemoveImage(i)}>\n                <CloseCircleOutlined />\n              </StyleButton>\n            </div>\n          ))}\n        </div>\n      )}\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"글을 작성하세요\"\n        style={{\n          color: '#fff',\n          background: 'rgba(0, 0, 0, 0.4)',\n          border: 'none',\n          resize: 'none',\n          height: '70px',\n        }}\n      />\n      <div>\n        <input\n          type=\"file\"\n          name=\"image\"\n          multiple\n          hidden\n          ref={imageInputRef}\n          onChange={onChangeImages}\n        />\n        <div\n          style={{\n            textAlign: 'end',\n            marginTop: '0.5rem',\n          }}\n        >\n          <Button onClick={onClickImageUpload}>업로드</Button>\n          <Button style={{ marginLeft: '0.5rem' }} type=\"primary\" htmlType=\"submit\">\n            올리기\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nexport default memo(PostForm);\n","import { useState, useCallback, Dispatch, SetStateAction } from 'react';\n\nfunction useInput<T>(initialValue: T): [T, any, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState(initialValue);\n\n  const handler = useCallback(e => {\n    setValue(e.target.value);\n  }, []);\n\n  return [value, handler, setValue];\n}\n\nexport default useInput;\n"],"sourceRoot":""}