{"ast":null,"code":"import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { actionTypesPost } from '../interfaces/post/postAction.interfaces';\nimport axios from 'axios';\n\nfunction postAPI(data) {\n  return axios.post(`/post/${data.communityId}`, data.formData);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(postAPI, action.data);\n    yield put({\n      type: actionTypesPost.ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.ADD_POST_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/community/${data.communityId}/post/${data.postId}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: actionTypesPost.REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REMOVE_POST_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(`/post/community/${data.communityId}/post/${data.postId}`, data);\n}\n\nfunction* updatePost(action) {\n  try {\n    const result = yield call(updatePostAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPDATE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPDATE_POST_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction reportPostAPI(data) {\n  return axios.post(`/post/${data.contentId}/report`, data);\n}\n\nfunction* reportPost(action) {\n  try {\n    yield call(reportPostAPI, action.data);\n    yield put({\n      type: actionTypesPost.REPORT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REPORT_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(`/posts/community/${data.communityId}/post?lastId=${data.postId}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: actionTypesPost.LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.LOAD_POSTS_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.ADD_COMMENT_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction updateCommentAPI(data) {\n  return axios.patch(`/post/${data.postId}/comment/${data.commentId}`, data);\n}\n\nfunction* updateComment(action) {\n  try {\n    const result = yield call(updateCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPDATE_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPDATE_COMMENT_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction removeCommentAPI(data) {\n  return axios.delete(`/post/${data.postId}/comment/${data.commentId}`);\n}\n\nfunction* removeComment(action) {\n  try {\n    const result = yield call(removeCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.REMOVE_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REMOVE_COMMENT_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPLOAD_IMAGES_ERROR,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(actionTypesPost.ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchUpdatePost() {\n  yield takeLatest(actionTypesPost.UPDATE_POST_REQUEST, updatePost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(actionTypesPost.REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchReportPost() {\n  yield takeLatest(actionTypesPost.REPORT_REQUEST, reportPost);\n}\n\nfunction* watchloadPosts() {\n  yield takeLatest(actionTypesPost.LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(actionTypesPost.ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchUpdateComment() {\n  yield takeLatest(actionTypesPost.UPDATE_COMMENT_REQUEST, updateComment);\n}\n\nfunction* watchRemoveComment() {\n  yield takeLatest(actionTypesPost.REMOVE_COMMENT_REQUEST, removeComment);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(actionTypesPost.UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchUpdatePost), fork(watchRemovePost), fork(watchReportPost), fork(watchloadPosts), fork(watchAddComment), fork(watchUpdateComment), fork(watchRemoveComment), fork(watchUploadImages)]);\n}","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/sagas/post.ts"],"names":["all","call","fork","put","takeLatest","actionTypesPost","axios","postAPI","data","post","communityId","formData","addPost","action","result","type","ADD_POST_SUCCESS","error","ADD_POST_ERROR","response","removePostAPI","delete","postId","removePost","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","updatePostAPI","patch","updatePost","UPDATE_POST_SUCCESS","UPDATE_POST_ERROR","reportPostAPI","contentId","reportPost","REPORT_SUCCESS","REPORT_ERROR","loadPostsAPI","get","loadPosts","LOAD_POSTS_SUCCESS","LOAD_POSTS_ERROR","addCommentAPI","addComment","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","updateCommentAPI","commentId","updateComment","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_ERROR","removeCommentAPI","removeComment","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_ERROR","uploadImagesAPI","uploadImages","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_ERROR","watchAddPost","ADD_POST_REQUEST","watchUpdatePost","UPDATE_POST_REQUEST","watchRemovePost","REMOVE_POST_REQUEST","watchReportPost","REPORT_REQUEST","watchloadPosts","LOAD_POSTS_REQUEST","watchAddComment","ADD_COMMENT_REQUEST","watchUpdateComment","UPDATE_COMMENT_REQUEST","watchRemoveComment","REMOVE_COMMENT_REQUEST","watchUploadImages","UPLOAD_IMAGES_REQUEST","postSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport {\n  actionTypesPost,\n  AddPostData,\n  CommentData,\n  IAddCommentRequest,\n  IAddPostRequest,\n  ILoadPostsRequest,\n  IRemoveCommentRequest,\n  IRemovePostRequest,\n  IReportData,\n  IReportRequest,\n  IUpdateCommentRequest,\n  IUpdatePostRequest,\n  IUploadImagesRequest,\n} from '../interfaces/post/postAction.interfaces';\nimport axios from 'axios';\nimport { IComment, IPost } from 'interfaces/db';\n\nfunction postAPI(data: AddPostData) {\n  return axios.post(`/post/${data.communityId}`, data.formData);\n}\n\nfunction* addPost(action: IAddPostRequest) {\n  try {\n    const result: { data: IPost } = yield call(postAPI, action.data);\n    yield put({\n      type: actionTypesPost.ADD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.ADD_POST_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data: { communityId: number; postId: number }) {\n  return axios.delete(`/post/community/${data.communityId}/post/${data.postId}`);\n}\n\nfunction* removePost(action: IRemovePostRequest) {\n  try {\n    const result: { data: { postId: number } } = yield call(removePostAPI, action.data);\n    yield put({\n      type: actionTypesPost.REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REMOVE_POST_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction updatePostAPI(data: { postId: number; communityId: number; content: string }) {\n  return axios.patch(`/post/community/${data.communityId}/post/${data.postId}`, data);\n}\n\nfunction* updatePost(action: IUpdatePostRequest) {\n  try {\n    const result: { data: { postId: number; content: string } } = yield call(\n      updatePostAPI,\n      action.data\n    );\n    yield put({\n      type: actionTypesPost.UPDATE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPDATE_POST_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction reportPostAPI(data: IReportData) {\n  return axios.post(`/post/${data.contentId}/report`, data);\n}\n\nfunction* reportPost(action: IReportRequest) {\n  try {\n    yield call(reportPostAPI, action.data);\n    yield put({\n      type: actionTypesPost.REPORT_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REPORT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data: { communityId: number; postId: number }) {\n  return axios.get(`/posts/community/${data.communityId}/post?lastId=${data.postId}`);\n}\n\nfunction* loadPosts(action: ILoadPostsRequest) {\n  try {\n    const result: { data: IPost[] } = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: actionTypesPost.LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.LOAD_POSTS_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data: CommentData) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action: IAddCommentRequest) {\n  try {\n    const result: { data: IComment } = yield call(addCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.ADD_COMMENT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction updateCommentAPI(data: { postId: number; commentId: number; content: string }) {\n  return axios.patch(`/post/${data.postId}/comment/${data.commentId}`, data);\n}\n\nfunction* updateComment(action: IUpdateCommentRequest) {\n  try {\n    const result: { data: { postId: number; commentId: number; content: string } } =\n      yield call(updateCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPDATE_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPDATE_COMMENT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction removeCommentAPI(data: { postId: number; commentId: number }) {\n  return axios.delete(`/post/${data.postId}/comment/${data.commentId}`);\n}\n\nfunction* removeComment(action: IRemoveCommentRequest) {\n  try {\n    const result: { data: { postId: number; commentId: number; content: string } } =\n      yield call(removeCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.REMOVE_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REMOVE_COMMENT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data: FormData) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action: IUploadImagesRequest) {\n  try {\n    const result: { data: string[] } = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPLOAD_IMAGES_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(actionTypesPost.ADD_POST_REQUEST, addPost);\n}\nfunction* watchUpdatePost() {\n  yield takeLatest(actionTypesPost.UPDATE_POST_REQUEST, updatePost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(actionTypesPost.REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchReportPost() {\n  yield takeLatest(actionTypesPost.REPORT_REQUEST, reportPost);\n}\nfunction* watchloadPosts() {\n  yield takeLatest(actionTypesPost.LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddComment() {\n  yield takeLatest(actionTypesPost.ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchUpdateComment() {\n  yield takeLatest(actionTypesPost.UPDATE_COMMENT_REQUEST, updateComment);\n}\nfunction* watchRemoveComment() {\n  yield takeLatest(actionTypesPost.REMOVE_COMMENT_REQUEST, removeComment);\n}\nfunction* watchUploadImages() {\n  yield takeLatest(actionTypesPost.UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchUpdatePost),\n    fork(watchRemovePost),\n    fork(watchReportPost),\n    fork(watchloadPosts),\n    fork(watchAddComment),\n    fork(watchUpdateComment),\n    fork(watchRemoveComment),\n    fork(watchUploadImages),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}