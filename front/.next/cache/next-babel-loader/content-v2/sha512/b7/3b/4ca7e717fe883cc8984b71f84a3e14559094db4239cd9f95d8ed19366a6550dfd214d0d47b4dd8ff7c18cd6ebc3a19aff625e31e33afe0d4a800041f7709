{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { removeCommentRequestAction, reportRequestAction } from 'actions/actionPost';\nimport React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer } from './styles';\n\nfunction CommentSettingModal(_ref) {\n  var setCurrentModifyComment = _ref.setCurrentModifyComment,\n      setEditMode = _ref.setEditMode,\n      postId = _ref.postId,\n      commentId = _ref.commentId,\n      commentOwnerId = _ref.commentOwnerId,\n      communityUserId = _ref.communityUserId,\n      content = _ref.content;\n  var dispatch = useDispatch();\n  var commentOwner = commentOwnerId === communityUserId;\n  var onClickModifyButton = useCallback(function () {\n    setCurrentModifyComment(commentId);\n    setEditMode(function (prev) {\n      return !prev;\n    });\n  }, [commentId]);\n  var onClickDeleteButton = useCallback(function () {\n    if (confirm('댓글을 지우시겠습니까?')) {\n      return dispatch(removeCommentRequestAction({\n        postId: postId,\n        commentId: commentId\n      }));\n    }\n  }, [postId, commentId]);\n  var onClickReportButton = useCallback(function () {\n    var reason = prompt('신고하는 이유를 적어주세요');\n\n    if (reason && communityUserId) {\n      dispatch(reportRequestAction({\n        contentId: commentId,\n        reporter: communityUserId,\n        reportedPerson: commentOwnerId,\n        reason: reason,\n        variety: 'comment',\n        content: content\n      }));\n    }\n  }, [commentOwnerId, communityUserId, commentId, content]);\n  return /*#__PURE__*/_jsx(ModalContainer, {\n    children: /*#__PURE__*/_jsx(\"ul\", {\n      children: commentOwner ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"li\", {\n          onClick: onClickModifyButton,\n          children: \"\\uC218\\uC815\"\n        }), /*#__PURE__*/_jsx(\"li\", {\n          onClick: onClickDeleteButton,\n          children: \"\\uC0AD\\uC81C\"\n        })]\n      }) : /*#__PURE__*/_jsx(\"li\", {\n        onClick: onClickReportButton,\n        children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n      })\n    })\n  });\n}\n\nexport default /*#__PURE__*/memo(CommentSettingModal);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/Modals/CommentSettingModal/index.tsx"],"names":["removeCommentRequestAction","reportRequestAction","React","memo","useCallback","useDispatch","ModalContainer","CommentSettingModal","setCurrentModifyComment","setEditMode","postId","commentId","commentOwnerId","communityUserId","content","dispatch","commentOwner","onClickModifyButton","prev","onClickDeleteButton","confirm","onClickReportButton","reason","prompt","contentId","reporter","reportedPerson","variety"],"mappings":";;;AAAA,SAASA,0BAAT,EAAqCC,mBAArC,QAAgE,oBAAhE;AACA,OAAOC,KAAP,IAA0BC,IAA1B,EAAgDC,WAAhD,QAAmE,OAAnE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;;AAYA,SAASC,mBAAT,OAQ6B;AAAA,MAP3BC,uBAO2B,QAP3BA,uBAO2B;AAAA,MAN3BC,WAM2B,QAN3BA,WAM2B;AAAA,MAL3BC,MAK2B,QAL3BA,MAK2B;AAAA,MAJ3BC,SAI2B,QAJ3BA,SAI2B;AAAA,MAH3BC,cAG2B,QAH3BA,cAG2B;AAAA,MAF3BC,eAE2B,QAF3BA,eAE2B;AAAA,MAD3BC,OAC2B,QAD3BA,OAC2B;AAC3B,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAMW,YAAY,GAAGJ,cAAc,KAAKC,eAAxC;AAEA,MAAMI,mBAAmB,GAAGb,WAAW,CAAC,YAAM;AAC5CI,IAAAA,uBAAuB,CAACG,SAAD,CAAvB;AACAF,IAAAA,WAAW,CAAC,UAAAS,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAAX;AACD,GAHsC,EAGpC,CAACP,SAAD,CAHoC,CAAvC;AAKA,MAAMQ,mBAAmB,GAAGf,WAAW,CAAC,YAAM;AAC5C,QAAIgB,OAAO,CAAC,cAAD,CAAX,EAA6B;AAC3B,aAAOL,QAAQ,CAACf,0BAA0B,CAAC;AAAEU,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,SAAS,EAATA;AAAV,OAAD,CAA3B,CAAf;AACD;AACF,GAJsC,EAIpC,CAACD,MAAD,EAASC,SAAT,CAJoC,CAAvC;AAMA,MAAMU,mBAAmB,GAAGjB,WAAW,CAAC,YAAM;AAC5C,QAAMkB,MAAM,GAAGC,MAAM,CAAC,gBAAD,CAArB;;AAEA,QAAID,MAAM,IAAIT,eAAd,EAA+B;AAC7BE,MAAAA,QAAQ,CACNd,mBAAmB,CAAC;AAClBuB,QAAAA,SAAS,EAAEb,SADO;AAElBc,QAAAA,QAAQ,EAAEZ,eAFQ;AAGlBa,QAAAA,cAAc,EAAEd,cAHE;AAIlBU,QAAAA,MAAM,EAANA,MAJkB;AAKlBK,QAAAA,OAAO,EAAE,SALS;AAMlBb,QAAAA,OAAO,EAAPA;AANkB,OAAD,CADb,CAAR;AAUD;AACF,GAfsC,EAepC,CAACF,cAAD,EAAiBC,eAAjB,EAAkCF,SAAlC,EAA6CG,OAA7C,CAfoC,CAAvC;AAiBA,sBACE,KAAC,cAAD;AAAA,2BACE;AAAA,gBACGE,YAAY,gBACX;AAAA,gCACE;AAAI,UAAA,OAAO,EAAEC,mBAAb;AAAA;AAAA,UADF,eAEE;AAAI,UAAA,OAAO,EAAEE,mBAAb;AAAA;AAAA,UAFF;AAAA,QADW,gBAMX;AAAI,QAAA,OAAO,EAAEE,mBAAb;AAAA;AAAA;AAPJ;AADF,IADF;AAcD;;AAED,4BAAelB,IAAI,CAACI,mBAAD,CAAnB","sourcesContent":["import { removeCommentRequestAction, reportRequestAction } from 'actions/actionPost';\r\nimport React, { Dispatch, memo, SetStateAction, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ModalContainer } from './styles';\r\n\r\ninterface CommentSettingModalProps {\r\n  setCurrentModifyComment: Dispatch<SetStateAction<number>>;\r\n  setEditMode: Dispatch<SetStateAction<boolean>>;\r\n  postId: number;\r\n  commentId: number;\r\n  commentOwnerId: number;\r\n  communityUserId: number;\r\n  content: string;\r\n}\r\n\r\nfunction CommentSettingModal({\r\n  setCurrentModifyComment,\r\n  setEditMode,\r\n  postId,\r\n  commentId,\r\n  commentOwnerId,\r\n  communityUserId,\r\n  content,\r\n}: CommentSettingModalProps) {\r\n  const dispatch = useDispatch();\r\n  const commentOwner = commentOwnerId === communityUserId;\r\n\r\n  const onClickModifyButton = useCallback(() => {\r\n    setCurrentModifyComment(commentId);\r\n    setEditMode(prev => !prev);\r\n  }, [commentId]);\r\n\r\n  const onClickDeleteButton = useCallback(() => {\r\n    if (confirm('댓글을 지우시겠습니까?')) {\r\n      return dispatch(removeCommentRequestAction({ postId, commentId }));\r\n    }\r\n  }, [postId, commentId]);\r\n\r\n  const onClickReportButton = useCallback(() => {\r\n    const reason = prompt('신고하는 이유를 적어주세요');\r\n\r\n    if (reason && communityUserId) {\r\n      dispatch(\r\n        reportRequestAction({\r\n          contentId: commentId,\r\n          reporter: communityUserId,\r\n          reportedPerson: commentOwnerId,\r\n          reason,\r\n          variety: 'comment',\r\n          content,\r\n        })\r\n      );\r\n    }\r\n  }, [commentOwnerId, communityUserId, commentId, content]);\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ul>\r\n        {commentOwner ? (\r\n          <>\r\n            <li onClick={onClickModifyButton}>수정</li>\r\n            <li onClick={onClickDeleteButton}>삭제</li>\r\n          </>\r\n        ) : (\r\n          <li onClick={onClickReportButton}>신고하기</li>\r\n        )}\r\n      </ul>\r\n    </ModalContainer>\r\n  );\r\n}\r\n\r\nexport default memo(CommentSettingModal);\r\n"]},"metadata":{},"sourceType":"module"}