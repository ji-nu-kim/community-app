{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport AppLayout from 'components/Layouts/AppLayout';\nimport React from 'react';\nimport Message from 'components/Message';\nimport Head from 'next/head';\n\nfunction Search() {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: \"community - \\uAC80\\uC0C9\"\n      })\n    }), /*#__PURE__*/_jsx(AppLayout, {\n      children: /*#__PURE__*/_jsx(Message, {\n        text: \"\\uCEE4\\uBBA4\\uB2C8\\uD2F0\\uB97C \\uAC80\\uC0C9\\uD558\\uC138\\uC694!\"\n      })\n    })]\n  });\n}\n\nexport var __N_SSP = true;\nexport default Search;","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/frontend/react/next/community/front/pages/search/index.tsx"],"names":["AppLayout","React","Message","Head","Search"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,8BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAMA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,MAAT,GAAkB;AAChB,sBACE;AAAA,4BACE,KAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AADF,MADF,eAIE,KAAC,SAAD;AAAA,6BACE,KAAC,OAAD;AAAS,QAAA,IAAI,EAAC;AAAd;AADF,MAJF;AAAA,IADF;AAUD;;;AAED,eAAeA,MAAf","sourcesContent":["import AppLayout from 'components/Layouts/AppLayout';\nimport React from 'react';\nimport Message from 'components/Message';\nimport { GetServerSideProps } from 'next';\nimport wrapper from 'store/configureStore';\nimport axios from 'axios';\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\nimport { END } from 'redux-saga';\nimport Head from 'next/head';\n\nfunction Search() {\n  return (\n    <>\n      <Head>\n        <title>community - 검색</title>\n      </Head>\n      <AppLayout>\n        <Message text=\"커뮤니티를 검색하세요!\" />\n      </AppLayout>\n    </>\n  );\n}\n\nexport default Search;\n\nexport const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(\n  async context => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(loadMyInfoRequestAction());\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n"]},"metadata":{},"sourceType":"module"}