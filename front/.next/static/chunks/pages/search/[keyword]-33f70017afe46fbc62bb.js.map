{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?90bd","webpack://_N_E/./pages/search/[keyword].tsx"],"names":["window","__NEXT_P","push","keyword","router","useRouter","changableCommunities","useSelector","state","community","query","length","className","map","href","id","prefetch","profilePhoto","categoryName","Categories","name","country","communityName","memo"],"mappings":"6FACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,oBACA,WACE,OAAO,EAAQ,Y,mNCevB,SAASC,IACP,IAAMC,EAASC,sBACPC,EAAyBC,aAC/B,SAACC,GAAD,OAA+BA,EAAMC,aAD/BH,qBAGR,OACE,qCACE,cAAC,IAAD,UACE,iDAAoBF,EAAOM,MAAMP,QAAjC,qBAEF,cAAC,UAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,wCACUC,EAAOM,MAAMP,QADvB,eAEE,uBAFF,qDAGaG,EAAqBK,OAHlC,cAMF,cAAC,IAAD,UACE,qBAAKC,UAAU,kBAAf,SACGN,EAAqBO,KAAI,SAAAJ,GAAS,OACjC,8BACE,cAAC,IAAD,CAAMK,KAAI,qBAAgBL,EAAUM,IAAMC,UAAU,EAApD,SACE,4BACE,cAAC,UAAD,CACEC,aAAcR,EAAUQ,aACxBC,aAAcT,EAAUU,WAAW,GAAGC,KACtCC,QAASZ,EAAUY,QACnBC,cAAeb,EAAUa,qBAPvBb,EAAUM,mB,SAoCrBQ,yBAAKpB,K","file":"static/chunks/pages/search/[keyword]-33f70017afe46fbc62bb.js","sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/search/[keyword]\",\n      function () {\n        return require(\"private-next-pages/search/[keyword].tsx\");\n      }\n    ]);\n  ","import { searchCommunitiesRequestAction } from 'actions/actionCommunity';\r\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\r\nimport axios from 'axios';\r\nimport AppLayout from 'components/Layouts/AppLayout';\r\nimport CategoryLayout, {\r\n  CategoryContent,\r\n  CategoryHeader,\r\n} from 'components/Layouts/CategoryLayout';\r\nimport { RootStateInterface } from 'interfaces/RootState';\r\nimport { GetServerSideProps } from 'next';\r\nimport React, { memo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport wrapper from 'store/configureStore';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport BoxStyleCard from 'components/Cards/BoxStyleCard';\r\n\r\nfunction keyword() {\r\n  const router = useRouter();\r\n  const { changableCommunities } = useSelector(\r\n    (state: RootStateInterface) => state.community\r\n  );\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>community - {router.query.keyword} 검색</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <CategoryLayout>\r\n          <CategoryHeader>\r\n            <h1>\r\n              &ldquo;{router.query.keyword}&rdquo;와\r\n              <br />\r\n              연관있는 커뮤니티 {changableCommunities.length}개\r\n            </h1>\r\n          </CategoryHeader>\r\n          <CategoryContent>\r\n            <div className=\"cards-container\">\r\n              {changableCommunities.map(community => (\r\n                <div key={community.id}>\r\n                  <Link href={`/community/${community.id}`} prefetch={false}>\r\n                    <a>\r\n                      <BoxStyleCard\r\n                        profilePhoto={community.profilePhoto}\r\n                        categoryName={community.Categories[0].name}\r\n                        country={community.country}\r\n                        communityName={community.communityName}\r\n                      />\r\n                    </a>\r\n                  </Link>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CategoryContent>\r\n        </CategoryLayout>\r\n      </AppLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(\r\n  async context => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    const keyword = String(context.query.keyword);\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n      axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch(loadMyInfoRequestAction());\r\n    context.store.dispatch(searchCommunitiesRequestAction({ keyword }));\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n  }\r\n);\r\n\r\nexport default memo(keyword);\r\n"],"sourceRoot":""}