{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"C:/Users/wlsdn/Desktop/next/community/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { updateCommentRequestAction } from 'actions/actionPost';\nimport useInput from 'hooks/useInput';\nimport React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer, ModalHeader, ModalBody } from './styles';\n\nfunction CommentEditModal(_ref) {\n  var setEditMode = _ref.setEditMode,\n      setCurrentModifyComment = _ref.setCurrentModifyComment,\n      currentCommentText = _ref.currentCommentText,\n      postId = _ref.postId,\n      commentId = _ref.commentId;\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(currentCommentText || ''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      content = _useInput2[0],\n      onChangeContent = _useInput2[1];\n\n  var onCloseCommentEditModal = useCallback(function () {\n    setCurrentModifyComment(0);\n    setEditMode(false);\n  }, []);\n  var onClickModify = useCallback(function () {\n    if (confirm('댓글을 수정하시겠습니까?')) {\n      dispatch(updateCommentRequestAction({\n        postId: postId,\n        commentId: commentId,\n        content: content\n      }));\n    }\n  }, [postId, commentId, content]);\n  return /*#__PURE__*/_jsxs(ModalContainer, {\n    children: [/*#__PURE__*/_jsxs(ModalHeader, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"modal-title\",\n        children: \"\\uB313\\uAE00 \\uC218\\uC815\"\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"close-button\",\n        onClick: onCloseCommentEditModal,\n        children: /*#__PURE__*/_jsx(CloseCircleOutlined, {})\n      })]\n    }), /*#__PURE__*/_jsxs(ModalBody, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"textarea\", {\n          onChange: onChangeContent,\n          value: content\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"modify-button\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: onClickModify,\n          children: \"\\uC218\\uC815\\uD558\\uAE30\"\n        })\n      })]\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(CommentEditModal);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/Modals/CommentEditModal/index.tsx"],"names":["CloseCircleOutlined","updateCommentRequestAction","useInput","React","memo","useCallback","useDispatch","ModalContainer","ModalHeader","ModalBody","CommentEditModal","setEditMode","setCurrentModifyComment","currentCommentText","postId","commentId","dispatch","content","onChangeContent","onCloseCommentEditModal","onClickModify","confirm"],"mappings":";;;AAAA,SAASA,mBAAT,QAAoC,mBAApC;AACA,SAASC,0BAAT,QAA2C,oBAA3C;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,IAA0BC,IAA1B,EAAgDC,WAAhD,QAAmE,OAAnE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,SAAtC,QAAuD,UAAvD;;AAUA,SAASC,gBAAT,OAM0B;AAAA,MALxBC,WAKwB,QALxBA,WAKwB;AAAA,MAJxBC,uBAIwB,QAJxBA,uBAIwB;AAAA,MAHxBC,kBAGwB,QAHxBA,kBAGwB;AAAA,MAFxBC,MAEwB,QAFxBA,MAEwB;AAAA,MADxBC,SACwB,QADxBA,SACwB;AACxB,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AADwB,kBAEWJ,QAAQ,CAASW,kBAAkB,IAAI,EAA/B,CAFnB;AAAA;AAAA,MAEjBI,OAFiB;AAAA,MAERC,eAFQ;;AAIxB,MAAMC,uBAAuB,GAAGd,WAAW,CAAC,YAAM;AAChDO,IAAAA,uBAAuB,CAAC,CAAD,CAAvB;AACAD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAH0C,EAGxC,EAHwC,CAA3C;AAKA,MAAMS,aAAa,GAAGf,WAAW,CAAC,YAAM;AACtC,QAAIgB,OAAO,CAAC,eAAD,CAAX,EAA8B;AAC5BL,MAAAA,QAAQ,CAACf,0BAA0B,CAAC;AAAEa,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,SAAS,EAATA,SAAV;AAAqBE,QAAAA,OAAO,EAAPA;AAArB,OAAD,CAA3B,CAAR;AACD;AACF,GAJgC,EAI9B,CAACH,MAAD,EAASC,SAAT,EAAoBE,OAApB,CAJ8B,CAAjC;AAMA,sBACE,MAAC,cAAD;AAAA,4BACE,MAAC,WAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA,QADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,OAAO,EAAEE,uBAAvC;AAAA,+BACE,KAAC,mBAAD;AADF,QAFF;AAAA,MADF,eAOE,MAAC,SAAD;AAAA,8BACE;AAAA,+BACE;AAAU,UAAA,QAAQ,EAAED,eAApB;AAAqC,UAAA,KAAK,EAAED;AAA5C;AADF,QADF,eAIE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEG,aAAjB;AAAA;AAAA;AADF,QAJF;AAAA,MAPF;AAAA,IADF;AAkBD;;AAED,4BAAehB,IAAI,CAACM,gBAAD,CAAnB","sourcesContent":["import { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { updateCommentRequestAction } from 'actions/actionPost';\r\nimport useInput from 'hooks/useInput';\r\nimport React, { Dispatch, memo, SetStateAction, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ModalContainer, ModalHeader, ModalBody } from './styles';\r\n\r\ninterface CommentEditModalProps {\r\n  setEditMode: Dispatch<SetStateAction<boolean>>;\r\n  setCurrentModifyComment: Dispatch<SetStateAction<number>>;\r\n  currentCommentText: string;\r\n  postId: number;\r\n  commentId: number;\r\n}\r\n\r\nfunction CommentEditModal({\r\n  setEditMode,\r\n  setCurrentModifyComment,\r\n  currentCommentText,\r\n  postId,\r\n  commentId,\r\n}: CommentEditModalProps) {\r\n  const dispatch = useDispatch();\r\n  const [content, onChangeContent] = useInput<string>(currentCommentText || '');\r\n\r\n  const onCloseCommentEditModal = useCallback(() => {\r\n    setCurrentModifyComment(0);\r\n    setEditMode(false);\r\n  }, []);\r\n\r\n  const onClickModify = useCallback(() => {\r\n    if (confirm('댓글을 수정하시겠습니까?')) {\r\n      dispatch(updateCommentRequestAction({ postId, commentId, content }));\r\n    }\r\n  }, [postId, commentId, content]);\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ModalHeader>\r\n        <div className=\"modal-title\">댓글 수정</div>\r\n        <div className=\"close-button\" onClick={onCloseCommentEditModal}>\r\n          <CloseCircleOutlined />\r\n        </div>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <div>\r\n          <textarea onChange={onChangeContent} value={content} />\r\n        </div>\r\n        <div className=\"modify-button\">\r\n          <button onClick={onClickModify}>수정하기</button>\r\n        </div>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  );\r\n}\r\n\r\nexport default memo(CommentEditModal);\r\n"]},"metadata":{},"sourceType":"module"}