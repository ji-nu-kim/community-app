{"ast":null,"code":"import { actionTypesPost } from '../interfaces/index';\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePost: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null,\n  reportLoading: false,\n  reportDone: false,\n  reportError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removeCommentLoading: false,\n  removeCommentDone: false,\n  removeCommentError: null,\n  updateCommentLoading: false,\n  updateCommentDone: false,\n  updateCommentError: null\n};\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case actionTypesPost.ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case actionTypesPost.ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = [];\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case actionTypesPost.ADD_POST_ERROR:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case actionTypesPost.REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case actionTypesPost.REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n        break;\n\n      case actionTypesPost.REMOVE_POST_ERROR:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case actionTypesPost.UPDATE_POST_REQUEST:\n        draft.updatePostLoading = true;\n        draft.updatePostDone = false;\n        draft.updatePostError = null;\n        break;\n\n      case actionTypesPost.UPDATE_POST_SUCCESS:\n        {\n          draft.updatePostLoading = false;\n          draft.updatePostDone = true;\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n\n          if (post) {\n            post.content = action.data.content;\n          }\n\n          break;\n        }\n\n      case actionTypesPost.UPDATE_POST_ERROR:\n        draft.updatePostLoading = false;\n        draft.updatePostError = action.error;\n        break;\n\n      case actionTypesPost.REPORT_REQUEST:\n        draft.reportLoading = true;\n        draft.reportDone = false;\n        draft.reportError = null;\n        break;\n\n      case actionTypesPost.REPORT_SUCCESS:\n        draft.reportLoading = false;\n        draft.reportDone = true;\n        break;\n\n      case actionTypesPost.REPORT_ERROR:\n        draft.reportLoading = false;\n        draft.reportError = action.error;\n        break;\n\n      case actionTypesPost.LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case actionTypesPost.LOAD_POSTS_SUCCESS:\n        {\n          draft.loadPostsLoading = false;\n          draft.loadPostsDone = true;\n          draft.mainPosts = draft.mainPosts.concat(action.data);\n          draft.hasMorePost = action.data.length === 10;\n          break;\n        }\n\n      case actionTypesPost.LOAD_POSTS_ERROR:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case actionTypesPost.ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case actionTypesPost.ADD_COMMENT_SUCCESS:\n        {\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n\n          if (post) {\n            post.Comments.unshift(action.data);\n          }\n\n          break;\n        }\n\n      case actionTypesPost.ADD_COMMENT_ERROR:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case actionTypesPost.UPDATE_COMMENT_REQUEST:\n        draft.updateCommentLoading = true;\n        draft.updateCommentDone = false;\n        draft.updateCommentError = null;\n        break;\n\n      case actionTypesPost.UPDATE_COMMENT_SUCCESS:\n        {\n          draft.updateCommentLoading = false;\n          draft.updateCommentDone = true;\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n\n          if (post) {\n            const comment = post.Comments.find(v => v.id === action.data.commentId);\n\n            if (comment) {\n              comment.content = action.data.content;\n            }\n          }\n\n          break;\n        }\n\n      case actionTypesPost.UPDATE_COMMENT_ERROR:\n        draft.updateCommentLoading = false;\n        draft.updateCommentError = action.error;\n        break;\n\n      case actionTypesPost.REMOVE_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n        break;\n\n      case actionTypesPost.REMOVE_COMMENT_SUCCESS:\n        {\n          draft.removeCommentLoading = false;\n          draft.removeCommentDone = true;\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n\n          if (post) {\n            post.Comments = post.Comments.filter(v => v.id !== action.data.commentId);\n          }\n\n          break;\n        }\n\n      case actionTypesPost.REMOVE_COMMENT_ERROR:\n        draft.removeCommentLoading = false;\n        draft.removeCommentError = action.error;\n        break;\n\n      case actionTypesPost.UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case actionTypesPost.UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case actionTypesPost.UPLOAD_IMAGES_ERROR:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case actionTypesPost.REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/reducers/post.ts"],"names":["actionTypesPost","produce","initialState","mainPosts","imagePaths","singlePost","hasMorePost","uploadImagesLoading","uploadImagesDone","uploadImagesError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","updatePostLoading","updatePostDone","updatePostError","reportLoading","reportDone","reportError","loadPostsLoading","loadPostsDone","loadPostsError","addCommentLoading","addCommentDone","addCommentError","removeCommentLoading","removeCommentDone","removeCommentError","updateCommentLoading","updateCommentDone","updateCommentError","reducer","state","action","draft","type","ADD_POST_REQUEST","ADD_POST_SUCCESS","unshift","data","ADD_POST_ERROR","error","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","filter","v","id","postId","REMOVE_POST_ERROR","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","post","find","content","UPDATE_POST_ERROR","REPORT_REQUEST","REPORT_SUCCESS","REPORT_ERROR","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","concat","length","LOAD_POSTS_ERROR","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","PostId","Comments","ADD_COMMENT_ERROR","UPDATE_COMMENT_REQUEST","UPDATE_COMMENT_SUCCESS","comment","commentId","UPDATE_COMMENT_ERROR","REMOVE_COMMENT_REQUEST","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_ERROR","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_ERROR","REMOVE_IMAGE","i"],"mappings":"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","sourcesContent":["import { actionTypesPost, PostState, ActionsPost } from '../interfaces/index';\n\nimport produce from 'immer';\n\nexport const initialState: PostState = {\n  mainPosts: [],\n  imagePaths: [],\n  singlePost: null,\n  hasMorePost: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  updatePostLoading: false,\n  updatePostDone: false,\n  updatePostError: null,\n  reportLoading: false,\n  reportDone: false,\n  reportError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removeCommentLoading: false,\n  removeCommentDone: false,\n  removeCommentError: null,\n  updateCommentLoading: false,\n  updateCommentDone: false,\n  updateCommentError: null,\n};\n\nconst reducer = (state = initialState, action: ActionsPost): PostState => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case actionTypesPost.ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case actionTypesPost.ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.imagePaths = [];\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case actionTypesPost.ADD_POST_ERROR:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case actionTypesPost.REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case actionTypesPost.REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.postId);\n        break;\n      case actionTypesPost.REMOVE_POST_ERROR:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case actionTypesPost.UPDATE_POST_REQUEST:\n        draft.updatePostLoading = true;\n        draft.updatePostDone = false;\n        draft.updatePostError = null;\n        break;\n      case actionTypesPost.UPDATE_POST_SUCCESS: {\n        draft.updatePostLoading = false;\n        draft.updatePostDone = true;\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        if (post) {\n          post.content = action.data.content;\n        }\n        break;\n      }\n      case actionTypesPost.UPDATE_POST_ERROR:\n        draft.updatePostLoading = false;\n        draft.updatePostError = action.error;\n        break;\n      case actionTypesPost.REPORT_REQUEST:\n        draft.reportLoading = true;\n        draft.reportDone = false;\n        draft.reportError = null;\n        break;\n      case actionTypesPost.REPORT_SUCCESS:\n        draft.reportLoading = false;\n        draft.reportDone = true;\n        break;\n      case actionTypesPost.REPORT_ERROR:\n        draft.reportLoading = false;\n        draft.reportError = action.error;\n        break;\n      case actionTypesPost.LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case actionTypesPost.LOAD_POSTS_SUCCESS: {\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePost = action.data.length === 10;\n        break;\n      }\n      case actionTypesPost.LOAD_POSTS_ERROR:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case actionTypesPost.ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case actionTypesPost.ADD_COMMENT_SUCCESS: {\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        if (post) {\n          post.Comments.unshift(action.data);\n        }\n        break;\n      }\n      case actionTypesPost.ADD_COMMENT_ERROR:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case actionTypesPost.UPDATE_COMMENT_REQUEST:\n        draft.updateCommentLoading = true;\n        draft.updateCommentDone = false;\n        draft.updateCommentError = null;\n        break;\n      case actionTypesPost.UPDATE_COMMENT_SUCCESS: {\n        draft.updateCommentLoading = false;\n        draft.updateCommentDone = true;\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        if (post) {\n          const comment = post.Comments.find(v => v.id === action.data.commentId);\n          if (comment) {\n            comment.content = action.data.content;\n          }\n        }\n        break;\n      }\n      case actionTypesPost.UPDATE_COMMENT_ERROR:\n        draft.updateCommentLoading = false;\n        draft.updateCommentError = action.error;\n        break;\n      case actionTypesPost.REMOVE_COMMENT_REQUEST:\n        draft.removeCommentLoading = true;\n        draft.removeCommentDone = false;\n        draft.removeCommentError = null;\n        break;\n      case actionTypesPost.REMOVE_COMMENT_SUCCESS: {\n        draft.removeCommentLoading = false;\n        draft.removeCommentDone = true;\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        if (post) {\n          post.Comments = post.Comments.filter(v => v.id !== action.data.commentId);\n        }\n        break;\n      }\n      case actionTypesPost.REMOVE_COMMENT_ERROR:\n        draft.removeCommentLoading = false;\n        draft.removeCommentError = action.error;\n        break;\n      case actionTypesPost.UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case actionTypesPost.UPLOAD_IMAGES_SUCCESS: {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n      case actionTypesPost.UPLOAD_IMAGES_ERROR:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case actionTypesPost.REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}