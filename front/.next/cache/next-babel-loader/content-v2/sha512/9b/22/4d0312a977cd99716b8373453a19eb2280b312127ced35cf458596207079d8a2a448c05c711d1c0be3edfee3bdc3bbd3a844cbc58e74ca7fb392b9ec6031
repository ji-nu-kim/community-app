{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { Button, Form } from 'antd';\nimport dynamic from 'next/dynamic';\nimport React, { memo, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ModalContainer, ModalHeader, ModalBody } from './styles';\nimport useInput from 'hooks/useInput';\nimport { changeProfileRequestAction } from 'actions/actionUser';\nconst ImageInsert = dynamic(() => import('components/ImageInsert'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/ImageInsert')],\n    modules: ['components/ImageInsert']\n  }\n});\nconst CategoryList = dynamic(() => import('components/CategoryList'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('components/CategoryList')],\n    modules: ['components/CategoryList']\n  }\n});\n\nfunction UserProfileModifyModal({\n  setUserProfileModifyModal\n}) {\n  var _me$Categories;\n\n  const dispatch = useDispatch();\n  const {\n    me,\n    imagePath\n  } = useSelector(state => state.user);\n  const [newNickname, onChangeNewNickname] = useInput((me === null || me === void 0 ? void 0 : me.nickname) || '');\n  const mainCategories = useSelector(state => state.community.mainCategories);\n  const {\n    0: categories,\n    1: setCategories\n  } = useState((me === null || me === void 0 ? void 0 : (_me$Categories = me.Categories) === null || _me$Categories === void 0 ? void 0 : _me$Categories.map(v => v.name)) || []);\n  const onCloseUserProfileModifyModal = useCallback(() => {\n    setUserProfileModifyModal(false);\n  }, []);\n  const onSubmit = useCallback(() => {\n    if (confirm('정보를 수정하시겠습니까?')) {\n      setTimeout(() => {\n        return dispatch(changeProfileRequestAction({\n          nickname: newNickname,\n          profilePhoto: imagePath,\n          category: categories\n        }));\n      }, 3000);\n    }\n  }, [imagePath, newNickname, categories]);\n  return /*#__PURE__*/_jsxs(ModalContainer, {\n    children: [/*#__PURE__*/_jsxs(ModalHeader, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"modal-title\",\n        children: \"\\uD504\\uB85C\\uD544\\uC218\\uC815\"\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"close-btn\",\n        onClick: onCloseUserProfileModifyModal,\n        children: /*#__PURE__*/_jsx(CloseCircleOutlined, {})\n      })]\n    }), /*#__PURE__*/_jsx(ModalBody, {\n      children: /*#__PURE__*/_jsxs(Form, {\n        onFinish: onSubmit,\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-profile\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"profile-img\",\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              children: \"\\uD504\\uB85C\\uD544\\uC0AC\\uC9C4\"\n            }), /*#__PURE__*/_jsx(ImageInsert, {\n              imagePath: imagePath,\n              profilePhoto: me === null || me === void 0 ? void 0 : me.profilePhoto\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"profile-nickname\",\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              htmlFor: \"nickname\",\n              children: \"\\uB2C9\\uB124\\uC784\"\n            }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"input\", {\n              id: \"nickname\",\n              type: \"text\",\n              value: newNickname,\n              onChange: onChangeNewNickname\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"form-category\",\n          children: [/*#__PURE__*/_jsxs(\"label\", {\n            children: [\"\\uAD00\\uC2EC\\uC0AC\", /*#__PURE__*/_jsx(\"span\", {\n              children: \" (\\uCD5C\\uB300 5\\uAC1C\\uAE4C\\uC9C0 \\uC120\\uD0DD\\uAC00\\uB2A5\\uD569\\uB2C8\\uB2E4)\"\n            })]\n          }), /*#__PURE__*/_jsx(CategoryList, {\n            mainCategories: mainCategories,\n            categories: categories,\n            setCategories: setCategories\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"create-btn\",\n          children: /*#__PURE__*/_jsx(Button, {\n            ghost: true,\n            htmlType: \"submit\",\n            children: \"\\uC218\\uC815\\uD558\\uAE30\"\n          })\n        })]\n      })\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(UserProfileModifyModal);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/Modals/UserProfileModifyModal/index.tsx"],"names":["CloseCircleOutlined","Button","Form","dynamic","React","memo","useCallback","useState","useDispatch","useSelector","ModalContainer","ModalHeader","ModalBody","useInput","changeProfileRequestAction","ImageInsert","CategoryList","UserProfileModifyModal","setUserProfileModifyModal","dispatch","me","imagePath","state","user","newNickname","onChangeNewNickname","nickname","mainCategories","community","categories","setCategories","Categories","map","v","name","onCloseUserProfileModifyModal","onSubmit","confirm","setTimeout","profilePhoto","category"],"mappings":"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","sourcesContent":["import { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { Button, Form } from 'antd';\r\nimport dynamic from 'next/dynamic';\r\nimport { RootStateInterface } from 'interfaces/RootState';\r\nimport React, { Dispatch, memo, SetStateAction, useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ModalContainer, ModalHeader, ModalBody } from './styles';\r\nimport useInput from 'hooks/useInput';\r\nimport { changeProfileRequestAction } from 'actions/actionUser';\r\n\r\nconst ImageInsert = dynamic(() => import('components/ImageInsert'));\r\nconst CategoryList = dynamic(() => import('components/CategoryList'));\r\n\r\ninterface UserProfileModifyModalProps {\r\n  setUserProfileModifyModal: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nfunction UserProfileModifyModal({\r\n  setUserProfileModifyModal,\r\n}: UserProfileModifyModalProps) {\r\n  const dispatch = useDispatch();\r\n  const { me, imagePath } = useSelector((state: RootStateInterface) => state.user);\r\n  const [newNickname, onChangeNewNickname] = useInput<string>(me?.nickname || '');\r\n\r\n  const mainCategories = useSelector(\r\n    (state: RootStateInterface) => state.community.mainCategories\r\n  );\r\n\r\n  const [categories, setCategories] = useState<string[]>(\r\n    me?.Categories?.map(v => v.name) || []\r\n  );\r\n\r\n  const onCloseUserProfileModifyModal = useCallback(() => {\r\n    setUserProfileModifyModal(false);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (confirm('정보를 수정하시겠습니까?')) {\r\n      setTimeout(() => {\r\n        return dispatch(\r\n          changeProfileRequestAction({\r\n            nickname: newNickname,\r\n            profilePhoto: imagePath,\r\n            category: categories,\r\n          })\r\n        );\r\n      }, 3000);\r\n    }\r\n  }, [imagePath, newNickname, categories]);\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ModalHeader>\r\n        <div className=\"modal-title\">프로필수정</div>\r\n        <div className=\"close-btn\" onClick={onCloseUserProfileModifyModal}>\r\n          <CloseCircleOutlined />\r\n        </div>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Form onFinish={onSubmit} className=\"form\">\r\n          <div className=\"form-profile\">\r\n            <div className=\"profile-img\">\r\n              <label>프로필사진</label>\r\n              <ImageInsert imagePath={imagePath} profilePhoto={me?.profilePhoto} />\r\n            </div>\r\n            <div className=\"profile-nickname\">\r\n              <label htmlFor=\"nickname\">닉네임</label>\r\n              <br />\r\n              <input\r\n                id=\"nickname\"\r\n                type=\"text\"\r\n                value={newNickname}\r\n                onChange={onChangeNewNickname}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-category\">\r\n            <label>\r\n              관심사<span> (최대 5개까지 선택가능합니다)</span>\r\n            </label>\r\n            <CategoryList\r\n              mainCategories={mainCategories}\r\n              categories={categories}\r\n              setCategories={setCategories}\r\n            />\r\n          </div>\r\n          <div className=\"create-btn\">\r\n            <Button ghost htmlType=\"submit\">\r\n              수정하기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  );\r\n}\r\n\r\nexport default memo(UserProfileModifyModal);\r\n"]},"metadata":{},"sourceType":"module"}