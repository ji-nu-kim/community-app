{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Form, Input, Button } from 'antd';\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { addCommentRequestAction } from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CommentForm({\n  postId\n}) {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    addCommentDone\n  } = useSelector(state => state.post);\n  const [comment, onChangeComment, setComment] = useInput('');\n  useEffect(() => {\n    if (addCommentDone) {\n      setComment('');\n    }\n  }, [addCommentDone]);\n  const onSubmitComment = useCallback(() => {\n    if (!comment.trim() || !comment) {\n      alert('댓글을 입력하세요');\n      return;\n    }\n\n    if (me) {\n      return dispatch(addCommentRequestAction({\n        comment,\n        postId\n      }));\n    }\n  }, [comment, postId, me]);\n  return /*#__PURE__*/_jsx(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxs(Form.Item, {\n      style: {\n        marginTop: '0.5rem'\n      },\n      children: [/*#__PURE__*/_jsx(Input.TextArea, {\n        value: comment,\n        onChange: onChangeComment,\n        rows: 4,\n        placeholder: \"\\uB313\\uAE00\\uC744 \\uC791\\uC131\\uD558\\uC138\\uC694\",\n        style: {\n          background: 'rgba(0, 0, 0, .4)',\n          border: 'none',\n          color: '#fff',\n          resize: 'none',\n          height: '70px'\n        }\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          marginTop: '.5rem'\n        },\n        children: \"\\uB4F1\\uB85D\"\n      })]\n    })\n  });\n}\n\nexport default /*#__PURE__*/memo(CommentForm);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/CommentForm.tsx"],"names":["Form","Input","Button","React","memo","useCallback","useEffect","addCommentRequestAction","useInput","useDispatch","useSelector","CommentForm","postId","dispatch","me","state","user","addCommentDone","post","comment","onChangeComment","setComment","onSubmitComment","trim","alert","marginTop","background","border","color","resize","height"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,SAAnC,QAAoD,OAApD;AACA,SAASC,uBAAT,QAAwC,uBAAxC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAMA,SAASC,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAmD;AACjD,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM;AAAEK,IAAAA;AAAF,MAASJ,WAAW,CAAEK,KAAD,IAA+BA,KAAK,CAACC,IAAtC,CAA1B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAqBP,WAAW,CAAEK,KAAD,IAA+BA,KAAK,CAACG,IAAtC,CAAtC;AACA,QAAM,CAACC,OAAD,EAAUC,eAAV,EAA2BC,UAA3B,IAAyCb,QAAQ,CAAS,EAAT,CAAvD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,cAAJ,EAAoB;AAClBI,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,QAAMK,eAAe,GAAGjB,WAAW,CAAC,MAAM;AACxC,QAAI,CAACc,OAAO,CAACI,IAAR,EAAD,IAAmB,CAACJ,OAAxB,EAAiC;AAC/BK,MAAAA,KAAK,CAAC,WAAD,CAAL;AACA;AACD;;AAED,QAAIV,EAAJ,EAAQ;AACN,aAAOD,QAAQ,CACbN,uBAAuB,CAAC;AACtBY,QAAAA,OADsB;AAEtBP,QAAAA;AAFsB,OAAD,CADV,CAAf;AAMD;AACF,GAdkC,EAchC,CAACO,OAAD,EAAUP,MAAV,EAAkBE,EAAlB,CAdgC,CAAnC;AAgBA,sBACE,KAAC,IAAD;AAAM,IAAA,QAAQ,EAAEQ,eAAhB;AAAA,2BACE,MAAC,IAAD,CAAM,IAAN;AACE,MAAA,KAAK,EAAE;AACLG,QAAAA,SAAS,EAAE;AADN,OADT;AAAA,8BAKE,KAAC,KAAD,CAAO,QAAP;AACE,QAAA,KAAK,EAAEN,OADT;AAEE,QAAA,QAAQ,EAAEC,eAFZ;AAGE,QAAA,IAAI,EAAE,CAHR;AAIE,QAAA,WAAW,EAAC,mDAJd;AAKE,QAAA,KAAK,EAAE;AACLM,UAAAA,UAAU,EAAE,mBADP;AAELC,UAAAA,MAAM,EAAE,MAFH;AAGLC,UAAAA,KAAK,EAAE,MAHF;AAILC,UAAAA,MAAM,EAAE,MAJH;AAKLC,UAAAA,MAAM,EAAE;AALH;AALT,QALF,eAkBE,KAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAyC,QAAA,KAAK,EAAE;AAAEL,UAAAA,SAAS,EAAE;AAAb,SAAhD;AAAA;AAAA,QAlBF;AAAA;AADF,IADF;AA0BD;;AAED,4BAAerB,IAAI,CAACO,WAAD,CAAnB","sourcesContent":["import { Form, Input, Button } from 'antd';\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { addCommentRequestAction } from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { RootStateInterface } from '../interfaces/RootState';\nimport { useDispatch, useSelector } from 'react-redux';\n\ninterface CommentFormProps {\n  postId: number;\n}\n\nfunction CommentForm({ postId }: CommentFormProps) {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state: RootStateInterface) => state.user);\n  const { addCommentDone } = useSelector((state: RootStateInterface) => state.post);\n  const [comment, onChangeComment, setComment] = useInput<string>('');\n\n  useEffect(() => {\n    if (addCommentDone) {\n      setComment('');\n    }\n  }, [addCommentDone]);\n\n  const onSubmitComment = useCallback(() => {\n    if (!comment.trim() || !comment) {\n      alert('댓글을 입력하세요');\n      return;\n    }\n\n    if (me) {\n      return dispatch(\n        addCommentRequestAction({\n          comment,\n          postId,\n        })\n      );\n    }\n  }, [comment, postId, me]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item\n        style={{\n          marginTop: '0.5rem',\n        }}\n      >\n        <Input.TextArea\n          value={comment}\n          onChange={onChangeComment}\n          rows={4}\n          placeholder=\"댓글을 작성하세요\"\n          style={{\n            background: 'rgba(0, 0, 0, .4)',\n            border: 'none',\n            color: '#fff',\n            resize: 'none',\n            height: '70px',\n          }}\n        />\n        <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: '.5rem' }}>\n          등록\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default memo(CommentForm);\n"]},"metadata":{},"sourceType":"module"}