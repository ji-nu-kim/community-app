{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/wlsdn/Desktop/frontend/react/next/community/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(updatePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(reportPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(updateComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(removeComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdatePost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchReportPost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchloadPosts),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchUpdateComment),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveComment),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport { actionTypesPost } from '../interfaces/post/postAction.interfaces';\nimport axios from 'axios';\n\nfunction postAPI(data) {\n  return axios.post(\"/post/\".concat(data.communityId), data.formData);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(postAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: actionTypesPost.ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: actionTypesPost.ADD_POST_ERROR,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/community/\".concat(data.communityId, \"/post/\").concat(data.postId));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: actionTypesPost.REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: actionTypesPost.REMOVE_POST_ERROR,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction updatePostAPI(data) {\n  return axios.patch(\"/post/community/\".concat(data.communityId, \"/post/\").concat(data.postId), data);\n}\n\nfunction updatePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function updatePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(updatePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: actionTypesPost.UPDATE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: actionTypesPost.UPDATE_POST_ERROR,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction reportPostAPI(data) {\n  return axios.post(\"/post/\".concat(data.contentId, \"/report\"), data);\n}\n\nfunction reportPost(action) {\n  return _regeneratorRuntime.wrap(function reportPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(reportPostAPI, action.data);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: actionTypesPost.REPORT_SUCCESS\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: actionTypesPost.REPORT_ERROR,\n            error: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts/community/\".concat(data.communityId, \"/post?lastId=\").concat(data.postId));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: actionTypesPost.LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: actionTypesPost.LOAD_POSTS_ERROR,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: actionTypesPost.ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 12;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          _context6.next = 12;\n          return put({\n            type: actionTypesPost.ADD_COMMENT_ERROR,\n            error: _context6.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction updateCommentAPI(data) {\n  return axios.patch(\"/post/\".concat(data.postId, \"/comment/\").concat(data.commentId), data);\n}\n\nfunction updateComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function updateComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(updateCommentAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: actionTypesPost.UPDATE_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: actionTypesPost.UPDATE_COMMENT_ERROR,\n            error: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction removeCommentAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data.postId, \"/comment/\").concat(data.commentId));\n}\n\nfunction removeComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removeComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(removeCommentAPI, action.data);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: actionTypesPost.REMOVE_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 12;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          _context8.next = 12;\n          return put({\n            type: actionTypesPost.REMOVE_COMMENT_ERROR,\n            error: _context8.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: actionTypesPost.UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: actionTypesPost.UPLOAD_IMAGES_ERROR,\n            error: _context9.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(actionTypesPost.ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchUpdatePost() {\n  return _regeneratorRuntime.wrap(function watchUpdatePost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeLatest(actionTypesPost.UPDATE_POST_REQUEST, updatePost);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(actionTypesPost.REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchReportPost() {\n  return _regeneratorRuntime.wrap(function watchReportPost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(actionTypesPost.REPORT_REQUEST, reportPost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchloadPosts() {\n  return _regeneratorRuntime.wrap(function watchloadPosts$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(actionTypesPost.LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(actionTypesPost.ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchUpdateComment() {\n  return _regeneratorRuntime.wrap(function watchUpdateComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(actionTypesPost.UPDATE_COMMENT_REQUEST, updateComment);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchRemoveComment() {\n  return _regeneratorRuntime.wrap(function watchRemoveComment$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(actionTypesPost.REMOVE_COMMENT_REQUEST, removeComment);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(actionTypesPost.UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return all([fork(watchAddPost), fork(watchUpdatePost), fork(watchRemovePost), fork(watchReportPost), fork(watchloadPosts), fork(watchAddComment), fork(watchUpdateComment), fork(watchRemoveComment), fork(watchUploadImages)]);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/frontend/react/next/community/front/sagas/post.ts"],"names":["addPost","removePost","updatePost","reportPost","loadPosts","addComment","updateComment","removeComment","uploadImages","watchAddPost","watchUpdatePost","watchRemovePost","watchReportPost","watchloadPosts","watchAddComment","watchUpdateComment","watchRemoveComment","watchUploadImages","postSaga","all","call","fork","put","takeLatest","actionTypesPost","axios","postAPI","data","post","communityId","formData","action","result","type","ADD_POST_SUCCESS","ADD_POST_ERROR","error","response","removePostAPI","postId","REMOVE_POST_SUCCESS","REMOVE_POST_ERROR","updatePostAPI","patch","UPDATE_POST_SUCCESS","UPDATE_POST_ERROR","reportPostAPI","contentId","REPORT_SUCCESS","REPORT_ERROR","loadPostsAPI","get","LOAD_POSTS_SUCCESS","LOAD_POSTS_ERROR","addCommentAPI","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","updateCommentAPI","commentId","UPDATE_COMMENT_SUCCESS","UPDATE_COMMENT_ERROR","removeCommentAPI","REMOVE_COMMENT_SUCCESS","REMOVE_COMMENT_ERROR","uploadImagesAPI","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_ERROR","ADD_POST_REQUEST","UPDATE_POST_REQUEST","REMOVE_POST_REQUEST","REPORT_REQUEST","LOAD_POSTS_REQUEST","ADD_COMMENT_REQUEST","UPDATE_COMMENT_REQUEST","REMOVE_COMMENT_REQUEST","UPLOAD_IMAGES_REQUEST"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport {\n  actionTypesPost,\n  AddPostData,\n  CommentData,\n  IAddCommentRequest,\n  IAddPostRequest,\n  ILoadPostsRequest,\n  IRemoveCommentRequest,\n  IRemovePostRequest,\n  IReportData,\n  IReportRequest,\n  IUpdateCommentRequest,\n  IUpdatePostRequest,\n  IUploadImagesRequest,\n} from '../interfaces/post/postAction.interfaces';\nimport axios from 'axios';\nimport { IComment, IPost } from 'interfaces/db';\n\nfunction postAPI(data: AddPostData) {\n  return axios.post(`/post/${data.communityId}`, data.formData);\n}\n\nfunction* addPost(action: IAddPostRequest) {\n  try {\n    const result: { data: IPost } = yield call(postAPI, action.data);\n    yield put({\n      type: actionTypesPost.ADD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.ADD_POST_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data: { communityId: number; postId: number }) {\n  return axios.delete(`/post/community/${data.communityId}/post/${data.postId}`);\n}\n\nfunction* removePost(action: IRemovePostRequest) {\n  try {\n    const result: { data: { postId: number } } = yield call(removePostAPI, action.data);\n    yield put({\n      type: actionTypesPost.REMOVE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REMOVE_POST_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction updatePostAPI(data: { postId: number; communityId: number; content: string }) {\n  return axios.patch(`/post/community/${data.communityId}/post/${data.postId}`, data);\n}\n\nfunction* updatePost(action: IUpdatePostRequest) {\n  try {\n    const result: { data: { postId: number; content: string } } = yield call(\n      updatePostAPI,\n      action.data\n    );\n    yield put({\n      type: actionTypesPost.UPDATE_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPDATE_POST_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction reportPostAPI(data: IReportData) {\n  return axios.post(`/post/${data.contentId}/report`, data);\n}\n\nfunction* reportPost(action: IReportRequest) {\n  try {\n    yield call(reportPostAPI, action.data);\n    yield put({\n      type: actionTypesPost.REPORT_SUCCESS,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REPORT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data: { communityId: number; postId: number }) {\n  return axios.get(`/posts/community/${data.communityId}/post?lastId=${data.postId}`);\n}\n\nfunction* loadPosts(action: ILoadPostsRequest) {\n  try {\n    const result: { data: IPost[] } = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: actionTypesPost.LOAD_POSTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.LOAD_POSTS_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data: CommentData) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action: IAddCommentRequest) {\n  try {\n    const result: { data: IComment } = yield call(addCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.ADD_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.ADD_COMMENT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction updateCommentAPI(data: { postId: number; commentId: number; content: string }) {\n  return axios.patch(`/post/${data.postId}/comment/${data.commentId}`, data);\n}\n\nfunction* updateComment(action: IUpdateCommentRequest) {\n  try {\n    const result: { data: { postId: number; commentId: number; content: string } } =\n      yield call(updateCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPDATE_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPDATE_COMMENT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction removeCommentAPI(data: { postId: number; commentId: number }) {\n  return axios.delete(`/post/${data.postId}/comment/${data.commentId}`);\n}\n\nfunction* removeComment(action: IRemoveCommentRequest) {\n  try {\n    const result: { data: { postId: number; commentId: number; content: string } } =\n      yield call(removeCommentAPI, action.data);\n    yield put({\n      type: actionTypesPost.REMOVE_COMMENT_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.REMOVE_COMMENT_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data: FormData) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action: IUploadImagesRequest) {\n  try {\n    const result: { data: string[] } = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: actionTypesPost.UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (error) {\n    yield put({\n      type: actionTypesPost.UPLOAD_IMAGES_ERROR,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(actionTypesPost.ADD_POST_REQUEST, addPost);\n}\nfunction* watchUpdatePost() {\n  yield takeLatest(actionTypesPost.UPDATE_POST_REQUEST, updatePost);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(actionTypesPost.REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchReportPost() {\n  yield takeLatest(actionTypesPost.REPORT_REQUEST, reportPost);\n}\nfunction* watchloadPosts() {\n  yield takeLatest(actionTypesPost.LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchAddComment() {\n  yield takeLatest(actionTypesPost.ADD_COMMENT_REQUEST, addComment);\n}\nfunction* watchUpdateComment() {\n  yield takeLatest(actionTypesPost.UPDATE_COMMENT_REQUEST, updateComment);\n}\nfunction* watchRemoveComment() {\n  yield takeLatest(actionTypesPost.REMOVE_COMMENT_REQUEST, removeComment);\n}\nfunction* watchUploadImages() {\n  yield takeLatest(actionTypesPost.UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchUpdatePost),\n    fork(watchRemovePost),\n    fork(watchReportPost),\n    fork(watchloadPosts),\n    fork(watchAddComment),\n    fork(watchUpdateComment),\n    fork(watchRemoveComment),\n    fork(watchUploadImages),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}