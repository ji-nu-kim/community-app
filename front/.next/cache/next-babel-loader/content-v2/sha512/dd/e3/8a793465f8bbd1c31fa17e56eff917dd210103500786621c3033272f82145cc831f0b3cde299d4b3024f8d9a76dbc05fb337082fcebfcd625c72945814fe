{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { MessageOutlined, MoreOutlined } from '@ant-design/icons';\nimport { loadPostsRequestAction } from 'actions/actionPost';\nimport CommentForm from 'components/CommentForm';\nimport CommentEditModal from 'components/Modals/CommentEditModal';\nimport CommentSettingModal from 'components/Modals/CommentSettingModal';\nimport PostEditModal from 'components/Modals/PostEditModal';\nimport PostSettingModal from 'components/Modals/PostSettingModal';\nimport PostForm from 'components/PostForm';\nimport moment from 'moment';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostContainer } from './styles';\n\nfunction Post({\n  singleCommunity,\n  communityUser\n}) {\n  const dispatch = useDispatch();\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostsLoading,\n    updateCommentDone\n  } = useSelector(state => state.post);\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const {\n    0: showPostSettingButton,\n    1: setShowPostSettingButton\n  } = useState(false); // 포스트설정 모달 보여주기\n\n  const {\n    0: CurrentPostSettingButton,\n    1: setCurrentPostSettingButton\n  } = useState(0); // 현재 보여지고 있는 포스트설정 모달\n\n  const {\n    0: currentModifyPost,\n    1: setCurrentModifyPost\n  } = useState(0); // 현재 수정중인 포스트\n\n  const {\n    0: showCommentSettingButton,\n    1: setShowCommentSettingButton\n  } = useState(false);\n  const {\n    0: currentCommentSettingButton,\n    1: setCurrentCommentSettingButton\n  } = useState(0);\n  const {\n    0: currentModifyComment,\n    1: setCurrentModifyComment\n  } = useState(0);\n  const {\n    0: openPostCommentForm,\n    1: setOpenPostCommentForm\n  } = useState(false);\n  const {\n    0: currentPostCommentForm,\n    1: setCurrentPostCommentForm\n  } = useState(0);\n  const postContainerRef = useRef(null);\n  const onClickPostSettingButton = useCallback(postId => () => {\n    setCurrentPostSettingButton(postId);\n    setShowPostSettingButton(true);\n  }, []);\n  const onClickCommentSettingButton = useCallback(commentId => () => {\n    setCurrentCommentSettingButton(commentId);\n    setShowCommentSettingButton(true);\n  }, []);\n  const onTogglePostCommentForm = useCallback(postId => () => {\n    setCurrentPostCommentForm(postId);\n    setOpenPostCommentForm(prev => !prev);\n  }, []);\n  const onCloseSettingModal = useCallback(() => {\n    if (showPostSettingButton || showCommentSettingButton) {\n      setShowPostSettingButton(false);\n      setShowCommentSettingButton(false);\n    }\n  }, [showPostSettingButton, showCommentSettingButton]);\n  useEffect(() => {\n    if (updateCommentDone) {\n      setEditMode(false);\n    }\n  }, [updateCommentDone]);\n  useEffect(() => {\n    const postContainer = postContainerRef.current;\n    if (!postContainer) return;\n\n    function onScroll(e) {\n      if (communityUser && mainPosts.length) {\n        if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight - 300) {\n          if (hasMorePost && !loadPostsLoading) {\n            const lastId = mainPosts[mainPosts.length - 1].id;\n            dispatch(loadPostsRequestAction({\n              communityId: singleCommunity.id,\n              postId: lastId\n            }));\n          }\n        }\n      }\n    }\n\n    postContainer.addEventListener('scroll', onScroll);\n    return () => postContainer.removeEventListener('scroll', onScroll);\n  }, [communityUser, mainPosts, hasMorePost, loadPostsLoading, singleCommunity, postContainerRef.current]);\n  return /*#__PURE__*/_jsx(PostContainer, {\n    onClick: onCloseSettingModal,\n    ref: postContainerRef,\n    children: communityUser ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"post-form-container\",\n        children: /*#__PURE__*/_jsx(PostForm, {})\n      }), mainPosts.length ? /*#__PURE__*/_jsx(_Fragment, {\n        children: mainPosts.map(post => /*#__PURE__*/_jsxs(\"div\", {\n          className: \"post-body-container\",\n          children: [editMode && post.id === currentModifyPost && /*#__PURE__*/_jsx(PostEditModal, {\n            setEditMode: setEditMode,\n            setCurrentModifyPost: setCurrentModifyPost,\n            currentPostText: post.content,\n            postId: post.id,\n            communityId: singleCommunity.id\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"header post-body-header\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"header-left\",\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: post.User.profilePhoto ? /*#__PURE__*/_jsx(\"img\", {\n                  className: \"left-profile-image\",\n                  src: `${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${post.User.profilePhoto}`,\n                  alt: \"profile image\"\n                }) : /*#__PURE__*/_jsx(\"div\", {\n                  className: \"left-fake-image\",\n                  children: post.User.nickname[0]\n                })\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"left-nickname\",\n                children: post.User.nickname\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"header-right\",\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: \"right-day\",\n                children: moment(post.createdAt).locale('ko').format('LLL')\n              }), /*#__PURE__*/_jsx(\"div\", {\n                className: \"right-buttons\",\n                onClick: onClickPostSettingButton(post.id),\n                children: /*#__PURE__*/_jsx(MoreOutlined, {})\n              }), showPostSettingButton && post.id === CurrentPostSettingButton && /*#__PURE__*/_jsx(PostSettingModal, {\n                setCurrentModifyPost: setCurrentModifyPost,\n                setEditMode: setEditMode,\n                postId: post.id,\n                communityId: singleCommunity.id,\n                postOwnerId: post.User.id,\n                communityUserId: communityUser.id,\n                content: post.content\n              })]\n            })]\n          }), post.Images.length ? /*#__PURE__*/_jsx(\"img\", {\n            src: `${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${post.Images[0].src}`,\n            alt: \"image\",\n            className: \"post-image\"\n          }) : null, /*#__PURE__*/_jsx(\"div\", {\n            className: \"post-text\",\n            children: post.content\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"post-comment-info\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              onClick: onTogglePostCommentForm(post.id),\n              style: {\n                cursor: 'pointer'\n              },\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  marginRight: '4px'\n                },\n                children: /*#__PURE__*/_jsx(MessageOutlined, {})\n              }), post.Comments.length ? `댓글 ${post.Comments.length}개 모두보기` : '댓글 작성하기']\n            }), openPostCommentForm && currentPostCommentForm === post.id && /*#__PURE__*/_jsxs(_Fragment, {\n              children: [post.Comments && post.Comments.map(comment => /*#__PURE__*/_jsxs(\"div\", {\n                className: \"post-comment-container\",\n                children: [editMode && comment.id === currentModifyComment && /*#__PURE__*/_jsx(CommentEditModal, {\n                  setEditMode: setEditMode,\n                  setCurrentModifyComment: setCurrentModifyComment,\n                  currentCommentText: comment.content,\n                  postId: post.id,\n                  commentId: comment.id\n                }), /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"header comment-header\",\n                  children: [/*#__PURE__*/_jsxs(\"div\", {\n                    className: \"header-left\",\n                    children: [/*#__PURE__*/_jsx(\"span\", {\n                      children: comment.User.profilePhoto ? /*#__PURE__*/_jsx(\"img\", {\n                        className: \"left-profile-image\",\n                        src: `${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${comment.User.profilePhoto}`,\n                        alt: \"profile image\"\n                      }) : /*#__PURE__*/_jsx(\"div\", {\n                        className: \"left-fake-image\",\n                        children: comment.User.nickname[0]\n                      })\n                    }), /*#__PURE__*/_jsx(\"div\", {\n                      className: \"left-nickname\",\n                      children: comment.User.nickname\n                    })]\n                  }), /*#__PURE__*/_jsxs(\"div\", {\n                    className: \"header-right\",\n                    children: [/*#__PURE__*/_jsx(\"div\", {\n                      className: \"right-day\",\n                      children: moment(comment.createdAt).locale('ko').format('LLL')\n                    }), /*#__PURE__*/_jsx(\"div\", {\n                      className: \"right-buttons\",\n                      onClick: onClickCommentSettingButton(comment.id),\n                      children: /*#__PURE__*/_jsx(MoreOutlined, {})\n                    })]\n                  }), showCommentSettingButton && comment.id === currentCommentSettingButton && /*#__PURE__*/_jsx(CommentSettingModal, {\n                    setCurrentModifyComment: setCurrentModifyComment,\n                    setEditMode: setEditMode,\n                    postId: post.id,\n                    commentId: comment.id,\n                    commentOwnerId: comment.User.id,\n                    communityUserId: communityUser.id,\n                    content: comment.content\n                  })]\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: \"comment-text\",\n                  children: comment.content\n                })]\n              }, comment.id)), /*#__PURE__*/_jsx(\"div\", {\n                className: \"post-comment-form-container\",\n                children: /*#__PURE__*/_jsx(CommentForm, {\n                  postId: post.id\n                })\n              })]\n            })]\n          })]\n        }, post.id))\n      }) : null]\n    }) : /*#__PURE__*/_jsx(\"div\", {\n      className: \"visitor-post\",\n      children: \"\\uCEE4\\uBBA4\\uB2C8\\uD2F0\\uC720\\uC800\\uB9CC \\uBCFC \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"\n    })\n  });\n}\n\nexport default /*#__PURE__*/memo(Post);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/CommunityBody/Post/index.tsx"],"names":["MessageOutlined","MoreOutlined","loadPostsRequestAction","CommentForm","CommentEditModal","CommentSettingModal","PostEditModal","PostSettingModal","PostForm","moment","React","memo","useCallback","useEffect","useState","useRef","useDispatch","useSelector","PostContainer","Post","singleCommunity","communityUser","dispatch","mainPosts","hasMorePost","loadPostsLoading","updateCommentDone","state","post","editMode","setEditMode","showPostSettingButton","setShowPostSettingButton","CurrentPostSettingButton","setCurrentPostSettingButton","currentModifyPost","setCurrentModifyPost","showCommentSettingButton","setShowCommentSettingButton","currentCommentSettingButton","setCurrentCommentSettingButton","currentModifyComment","setCurrentModifyComment","openPostCommentForm","setOpenPostCommentForm","currentPostCommentForm","setCurrentPostCommentForm","postContainerRef","onClickPostSettingButton","postId","onClickCommentSettingButton","commentId","onTogglePostCommentForm","prev","onCloseSettingModal","postContainer","current","onScroll","e","length","target","scrollTop","scrollHeight","offsetHeight","lastId","id","communityId","addEventListener","removeEventListener","map","content","User","profilePhoto","process","env","NEXT_PUBLIC_BACK_URL_KEY","nickname","createdAt","locale","format","Images","src","cursor","marginRight","Comments","comment"],"mappings":"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","sourcesContent":["import { MessageOutlined, MoreOutlined } from '@ant-design/icons';\r\nimport { loadPostsRequestAction } from 'actions/actionPost';\r\nimport CommentForm from 'components/CommentForm';\r\nimport CommentEditModal from 'components/Modals/CommentEditModal';\r\nimport CommentSettingModal from 'components/Modals/CommentSettingModal';\r\nimport PostEditModal from 'components/Modals/PostEditModal';\r\nimport PostSettingModal from 'components/Modals/PostSettingModal';\r\nimport PostForm from 'components/PostForm';\r\nimport { ICommunity, IUserInfo } from 'interfaces/db';\r\nimport { RootStateInterface } from 'interfaces/RootState';\r\nimport moment from 'moment';\r\nimport React, { memo, useCallback, useEffect, useState } from 'react';\r\nimport { useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PostContainer } from './styles';\r\n\r\ninterface PostProps {\r\n  singleCommunity: ICommunity;\r\n  communityUser: IUserInfo | undefined;\r\n}\r\n\r\nfunction Post({ singleCommunity, communityUser }: PostProps) {\r\n  const dispatch = useDispatch();\r\n  const { mainPosts, hasMorePost, loadPostsLoading, updateCommentDone } = useSelector(\r\n    (state: RootStateInterface) => state.post\r\n  );\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [showPostSettingButton, setShowPostSettingButton] = useState(false); // 포스트설정 모달 보여주기\r\n  const [CurrentPostSettingButton, setCurrentPostSettingButton] = useState(0); // 현재 보여지고 있는 포스트설정 모달\r\n  const [currentModifyPost, setCurrentModifyPost] = useState(0); // 현재 수정중인 포스트\r\n  const [showCommentSettingButton, setShowCommentSettingButton] = useState(false);\r\n  const [currentCommentSettingButton, setCurrentCommentSettingButton] = useState(0);\r\n  const [currentModifyComment, setCurrentModifyComment] = useState(0);\r\n  const [openPostCommentForm, setOpenPostCommentForm] = useState(false);\r\n  const [currentPostCommentForm, setCurrentPostCommentForm] = useState(0);\r\n  const postContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const onClickPostSettingButton = useCallback(\r\n    (postId: number) => () => {\r\n      setCurrentPostSettingButton(postId);\r\n      setShowPostSettingButton(true);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onClickCommentSettingButton = useCallback(\r\n    (commentId: number) => () => {\r\n      setCurrentCommentSettingButton(commentId);\r\n      setShowCommentSettingButton(true);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onTogglePostCommentForm = useCallback(\r\n    (postId: number) => () => {\r\n      setCurrentPostCommentForm(postId);\r\n      setOpenPostCommentForm(prev => !prev);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onCloseSettingModal = useCallback(() => {\r\n    if (showPostSettingButton || showCommentSettingButton) {\r\n      setShowPostSettingButton(false);\r\n      setShowCommentSettingButton(false);\r\n    }\r\n  }, [showPostSettingButton, showCommentSettingButton]);\r\n\r\n  useEffect(() => {\r\n    if (updateCommentDone) {\r\n      setEditMode(false);\r\n    }\r\n  }, [updateCommentDone]);\r\n\r\n  useEffect(() => {\r\n    const postContainer = postContainerRef.current;\r\n    if (!postContainer) return;\r\n\r\n    function onScroll(e: any) {\r\n      if (communityUser && mainPosts.length) {\r\n        if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight - 300) {\r\n          if (hasMorePost && !loadPostsLoading) {\r\n            const lastId = mainPosts[mainPosts.length - 1].id;\r\n            dispatch(\r\n              loadPostsRequestAction({ communityId: singleCommunity.id, postId: lastId })\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    postContainer.addEventListener('scroll', onScroll);\r\n\r\n    return () => postContainer.removeEventListener('scroll', onScroll);\r\n  }, [\r\n    communityUser,\r\n    mainPosts,\r\n    hasMorePost,\r\n    loadPostsLoading,\r\n    singleCommunity,\r\n    postContainerRef.current,\r\n  ]);\r\n\r\n  return (\r\n    <PostContainer onClick={onCloseSettingModal} ref={postContainerRef}>\r\n      {communityUser ? (\r\n        <>\r\n          <div className=\"post-form-container\">\r\n            <PostForm />\r\n          </div>\r\n          {mainPosts.length ? (\r\n            <>\r\n              {mainPosts.map(post => (\r\n                <div className=\"post-body-container\" key={post.id}>\r\n                  {editMode && post.id === currentModifyPost && (\r\n                    <PostEditModal\r\n                      setEditMode={setEditMode}\r\n                      setCurrentModifyPost={setCurrentModifyPost}\r\n                      currentPostText={post.content}\r\n                      postId={post.id}\r\n                      communityId={singleCommunity.id}\r\n                    />\r\n                  )}\r\n                  <div className=\"header post-body-header\">\r\n                    <div className=\"header-left\">\r\n                      <span>\r\n                        {post.User.profilePhoto ? (\r\n                          <img\r\n                            className=\"left-profile-image\"\r\n                            src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${post.User.profilePhoto}`}\r\n                            alt=\"profile image\"\r\n                          />\r\n                        ) : (\r\n                          <div className=\"left-fake-image\">{post.User.nickname[0]}</div>\r\n                        )}\r\n                      </span>\r\n                      <div className=\"left-nickname\">{post.User.nickname}</div>\r\n                    </div>\r\n                    <div className=\"header-right\">\r\n                      <div className=\"right-day\">\r\n                        {moment(post.createdAt).locale('ko').format('LLL')}\r\n                      </div>\r\n                      <div\r\n                        className=\"right-buttons\"\r\n                        onClick={onClickPostSettingButton(post.id)}\r\n                      >\r\n                        <MoreOutlined />\r\n                      </div>\r\n                      {showPostSettingButton && post.id === CurrentPostSettingButton && (\r\n                        <PostSettingModal\r\n                          setCurrentModifyPost={setCurrentModifyPost}\r\n                          setEditMode={setEditMode}\r\n                          postId={post.id}\r\n                          communityId={singleCommunity.id}\r\n                          postOwnerId={post.User.id}\r\n                          communityUserId={communityUser.id}\r\n                          content={post.content}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {post.Images.length ? (\r\n                    <img\r\n                      src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${post.Images[0].src}`}\r\n                      alt=\"image\"\r\n                      className=\"post-image\"\r\n                    />\r\n                  ) : null}\r\n                  <div className=\"post-text\">{post.content}</div>\r\n                  <div className=\"post-comment-info\">\r\n                    <div\r\n                      onClick={onTogglePostCommentForm(post.id)}\r\n                      style={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: '4px' }}>\r\n                        <MessageOutlined />\r\n                      </span>\r\n                      {post.Comments.length\r\n                        ? `댓글 ${post.Comments.length}개 모두보기`\r\n                        : '댓글 작성하기'}\r\n                    </div>\r\n                    {openPostCommentForm && currentPostCommentForm === post.id && (\r\n                      <>\r\n                        {post.Comments &&\r\n                          post.Comments.map(comment => (\r\n                            <div className=\"post-comment-container\" key={comment.id}>\r\n                              {editMode && comment.id === currentModifyComment && (\r\n                                <CommentEditModal\r\n                                  setEditMode={setEditMode}\r\n                                  setCurrentModifyComment={setCurrentModifyComment}\r\n                                  currentCommentText={comment.content}\r\n                                  postId={post.id}\r\n                                  commentId={comment.id}\r\n                                />\r\n                              )}\r\n                              <div className=\"header comment-header\">\r\n                                <div className=\"header-left\">\r\n                                  <span>\r\n                                    {comment.User.profilePhoto ? (\r\n                                      <img\r\n                                        className=\"left-profile-image\"\r\n                                        src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${comment.User.profilePhoto}`}\r\n                                        alt=\"profile image\"\r\n                                      />\r\n                                    ) : (\r\n                                      <div className=\"left-fake-image\">\r\n                                        {comment.User.nickname[0]}\r\n                                      </div>\r\n                                    )}\r\n                                  </span>\r\n                                  <div className=\"left-nickname\">\r\n                                    {comment.User.nickname}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"header-right\">\r\n                                  <div className=\"right-day\">\r\n                                    {moment(comment.createdAt).locale('ko').format('LLL')}\r\n                                  </div>\r\n                                  <div\r\n                                    className=\"right-buttons\"\r\n                                    onClick={onClickCommentSettingButton(comment.id)}\r\n                                  >\r\n                                    <MoreOutlined />\r\n                                  </div>\r\n                                </div>\r\n                                {showCommentSettingButton &&\r\n                                  comment.id === currentCommentSettingButton && (\r\n                                    <CommentSettingModal\r\n                                      setCurrentModifyComment={setCurrentModifyComment}\r\n                                      setEditMode={setEditMode}\r\n                                      postId={post.id}\r\n                                      commentId={comment.id}\r\n                                      commentOwnerId={comment.User.id}\r\n                                      communityUserId={communityUser.id}\r\n                                      content={comment.content}\r\n                                    />\r\n                                  )}\r\n                              </div>\r\n                              <div className=\"comment-text\">{comment.content}</div>\r\n                            </div>\r\n                          ))}\r\n                        <div className=\"post-comment-form-container\">\r\n                          <CommentForm postId={post.id} />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </>\r\n          ) : null}\r\n        </>\r\n      ) : (\r\n        <div className=\"visitor-post\">커뮤니티유저만 볼 수 있습니다</div>\r\n      )}\r\n    </PostContainer>\r\n  );\r\n}\r\n\r\nexport default memo(Post);\r\n"]},"metadata":{},"sourceType":"module"}