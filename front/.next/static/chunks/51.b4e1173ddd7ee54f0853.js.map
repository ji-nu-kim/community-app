{"version":3,"sources":["webpack://_N_E/./components/PostForm.tsx"],"names":["StyleButton","styled","Button","PostForm","router","useRouter","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","addPostRequestAction","communityId","Number","query","id","imageInputRef","useRef","onClickImageUpload","current","click","onChangeImages","e","imageFormData","call","target","files","f","uploadImagesRequestAction","onRemoveImage","removeImage","style","height","display","justifyContent","flexDirection","encType","onFinish","marginBottom","map","v","i","marginRight","background","src","replace","width","alt","onClick","TextArea","value","onChange","maxLength","placeholder","color","border","resize","type","name","multiple","hidden","ref","textAlign","marginTop","marginLeft","htmlType","memo"],"mappings":"+PAeMA,EAAcC,YAAOC,KAAV,2EAAGD,CAAH,uIAcjB,SAASE,IACP,IAAMC,EAASC,sBADG,EAEkBC,aAClC,SAACC,GAAD,OAA+BA,EAAMC,QAD/BC,EAFU,EAEVA,WAAYC,EAFF,EAEEA,YAGdC,EAAWC,cALC,EAMoBC,YAAiB,IANrC,mBAMXC,EANW,KAMLC,EANK,KAMSC,EANT,KAQlBC,qBAAU,WACJP,GACFM,EAAQ,MAET,CAACN,IAEJ,IAAMQ,EAAWC,uBAAY,WAC3B,IAAKL,IAASA,EAAKM,OACjB,OAAOC,MAAM,iEAEf,IAAMC,EAAW,IAAIC,SAGrB,OAFAd,EAAWe,SAAQ,SAAAC,GAAC,OAAIH,EAASI,OAAO,QAASD,MACjDH,EAASI,OAAO,UAAWZ,GACpBH,EACLgB,YAAqB,CAAEL,WAAUM,YAAaC,OAAOzB,EAAO0B,MAAMC,SAEnE,CAACjB,EAAML,IAEJuB,EAAgBC,iBAAyB,MACzCC,EAAqBf,uBAAY,WAAM,MAC3C,UAAAa,EAAcG,eAAd,SAAuBC,UACtB,CAACJ,EAAcG,UAEZE,EAAiBlB,uBAAY,SAACmB,GAClC,IAAMC,EAAgB,IAAIhB,SAI1B,MAHA,GAAGC,QAAQgB,KAAKF,EAAEG,OAAOC,OAAO,SAAAC,GAC9BJ,EAAcb,OAAO,QAASiB,MAEzBhC,EAASiC,YAA0BL,MACzC,IAEGM,EAAgB1B,uBACpB,SAACY,GAAD,OAAgB,WACd,OAAOpB,EAASmC,YAAYf,OAE9B,IAGF,OACE,eAAC,IAAD,CACEgB,MAAO,CACLC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,cAAe,UAEjBC,QAAQ,sBACRC,SAAUnC,EARZ,UAUGT,GACC,qBACEsC,MAAO,CACLE,QAAS,OACTK,aAAc,QAHlB,SAMG7C,EAAW8C,KAAI,SAACC,EAAGC,GAAJ,OACd,sBAAaV,MAAO,CAAEW,YAAa,OAAQC,WAAY,kBAAvD,UACE,qBACEC,IAAKJ,EAAEK,QAAQ,aAAc,cAC7Bd,MAAO,CAAEe,MAAO,SAChBC,IAAKP,IAEP,cAACxD,EAAD,CAAagE,QAASnB,EAAcY,GAApC,SACE,cAAC,IAAD,QAPMD,QAahB,cAAC,IAAMS,SAAP,CACEC,MAAOpD,EACPqD,SAAUpD,EACVqD,UAAW,IACXC,YAAY,8CACZtB,MAAO,CACLuB,MAAO,OACPX,WAAY,qBACZY,OAAQ,OACRC,OAAQ,OACRxB,OAAQ,UAGZ,gCACE,uBACEyB,KAAK,OACLC,KAAK,QACLC,UAAQ,EACRC,QAAM,EACNC,IAAK7C,EACLmC,SAAU9B,IAEZ,sBACEU,MAAO,CACL+B,UAAW,MACXC,UAAW,UAHf,UAME,cAAC,IAAD,CAAQf,QAAS9B,EAAjB,gCACA,cAAC,IAAD,CAAQa,MAAO,CAAEiC,WAAY,UAAYP,KAAK,UAAUQ,SAAS,SAAjE,yCASKC,yBAAK/E","file":"static/chunks/51.b4e1173ddd7ee54f0853.js","sourcesContent":["import {\n  addPostRequestAction,\n  removeImage,\n  uploadImagesRequestAction,\n} from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { Button, Form, Input } from 'antd';\nimport React, { ChangeEvent, memo, useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootStateInterface } from '../interfaces/RootState';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\n\nconst StyleButton = styled(Button)`\n  background: none;\n  border: none;\n  position: absolute;\n  margin-left: -35px;\n  color: #fff;\n  margin-top: -5px;\n\n  :hover {\n    background: none;\n    color: #039be5;\n  }\n`;\n\nfunction PostForm() {\n  const router = useRouter();\n  const { imagePaths, addPostDone } = useSelector(\n    (state: RootStateInterface) => state.post\n  );\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput<string>('');\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요');\n    }\n    const formData = new FormData();\n    imagePaths.forEach(p => formData.append('image', p));\n    formData.append('content', text);\n    return dispatch(\n      addPostRequestAction({ formData, communityId: Number(router.query.id) })\n    );\n  }, [text, imagePaths]);\n\n  const imageInputRef = useRef<HTMLInputElement>(null);\n  const onClickImageUpload = useCallback(() => {\n    imageInputRef.current?.click();\n  }, [imageInputRef.current]);\n\n  const onChangeImages = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    return dispatch(uploadImagesRequestAction(imageFormData));\n  }, []);\n\n  const onRemoveImage = useCallback(\n    (id: number) => () => {\n      return dispatch(removeImage(id));\n    },\n    []\n  );\n\n  return (\n    <Form\n      style={{\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      {imagePaths && (\n        <div\n          style={{\n            display: 'flex',\n            marginBottom: '1rem',\n          }}\n        >\n          {imagePaths.map((v, i) => (\n            <div key={v} style={{ marginRight: '1rem', background: 'rgba(0,0,0,.7)' }}>\n              <img\n                src={v.replace(/\\/resize\\//, '/original/')}\n                style={{ width: '100px' }}\n                alt={v}\n              />\n              <StyleButton onClick={onRemoveImage(i)}>\n                <CloseCircleOutlined />\n              </StyleButton>\n            </div>\n          ))}\n        </div>\n      )}\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"글을 작성하세요\"\n        style={{\n          color: '#fff',\n          background: 'rgba(0, 0, 0, 0.4)',\n          border: 'none',\n          resize: 'none',\n          height: '70px',\n        }}\n      />\n      <div>\n        <input\n          type=\"file\"\n          name=\"image\"\n          multiple\n          hidden\n          ref={imageInputRef}\n          onChange={onChangeImages}\n        />\n        <div\n          style={{\n            textAlign: 'end',\n            marginTop: '0.5rem',\n          }}\n        >\n          <Button onClick={onClickImageUpload}>업로드</Button>\n          <Button style={{ marginLeft: '0.5rem' }} type=\"primary\" htmlType=\"submit\">\n            올리기\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nexport default memo(PostForm);\n"],"sourceRoot":""}