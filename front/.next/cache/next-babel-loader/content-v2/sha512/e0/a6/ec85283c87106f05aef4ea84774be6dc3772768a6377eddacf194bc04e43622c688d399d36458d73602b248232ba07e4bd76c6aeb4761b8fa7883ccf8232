{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { memo, useCallback, useRef } from 'react';\nimport { CameraOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeImage, uploadImageRequestAction } from 'actions/actionUser';\nimport { ProfileImgContainer } from './styles';\nimport { Button } from 'antd';\nimport { useRouter } from 'next/router';\nimport { removeCommunityImage, uploadCommunityImageRequestAction } from 'actions/actionCommunity';\n\nfunction ImageInsert(_ref) {\n  var imagePath = _ref.imagePath,\n      profilePhoto = _ref.profilePhoto;\n  var router = useRouter();\n  var dispatch = useDispatch();\n  var imageInputRef = useRef(null);\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      uploadImageDone = _useSelector.uploadImageDone;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.community;\n  }),\n      uploadCommunityImageDone = _useSelector2.uploadCommunityImageDone;\n\n  var onClickImageUpload = useCallback(function () {\n    var route = router.route.split('/')[1];\n\n    if (route === 'profile' && !uploadImageDone) {\n      var _imageInputRef$curren;\n\n      (_imageInputRef$curren = imageInputRef.current) === null || _imageInputRef$curren === void 0 ? void 0 : _imageInputRef$curren.click();\n    } else if (route === 'community' && !uploadCommunityImageDone) {\n      var _imageInputRef$curren2;\n\n      (_imageInputRef$curren2 = imageInputRef.current) === null || _imageInputRef$curren2 === void 0 ? void 0 : _imageInputRef$curren2.click();\n    }\n  }, [imageInputRef.current, uploadImageDone, uploadCommunityImageDone]);\n  var onChangeImages = useCallback(function (e) {\n    var _e$target$files;\n\n    if ((_e$target$files = e.target.files) !== null && _e$target$files !== void 0 && _e$target$files.length) {\n      var route = router.route.split('/')[1];\n      var imageFormData = new FormData();\n      [].forEach.call(e.target.files, function (f) {\n        imageFormData.append('image', f);\n      });\n\n      if (route === 'profile') {\n        return dispatch(uploadImageRequestAction(imageFormData));\n      } else if (route === 'community') {\n        return dispatch(uploadCommunityImageRequestAction(imageFormData));\n      }\n    }\n  }, []);\n  var onRemoveImage = useCallback(function () {\n    var route = router.route.split('/')[1];\n\n    if (imagePath.length) {\n      if (route === 'profile') {\n        return dispatch(removeImage());\n      } else if (route === 'community') {\n        return dispatch(removeCommunityImage());\n      }\n    }\n  }, [imagePath]);\n  return /*#__PURE__*/_jsx(ProfileImgContainer, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        hidden: true,\n        ref: imageInputRef,\n        onChange: onChangeImages\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        shape: \"circle\",\n        className: \"img-input-btn\",\n        children: imagePath.length ? /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            width: \"100\",\n            height: \"100\",\n            src: imagePath[0].replace(/\\/resize\\//, 'original'),\n            alt: \"profileimage\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            onClick: onRemoveImage,\n            className: \"img-delete-btn\",\n            children: \"\\uC9C0\\uC6B0\\uAE30\"\n          })]\n        }) : profilePhoto ? /*#__PURE__*/_jsx(\"img\", {\n          width: \"100\",\n          height: \"100\",\n          src: profilePhoto,\n          alt: \"profileimage\"\n        }) : /*#__PURE__*/_jsx(CameraOutlined, {\n          className: \"img-input-icon\"\n        })\n      })]\n    })\n  });\n}\n\nexport default /*#__PURE__*/memo(ImageInsert);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/ImageInsert/index.tsx"],"names":["React","memo","useCallback","useRef","CameraOutlined","useDispatch","useSelector","removeImage","uploadImageRequestAction","ProfileImgContainer","Button","useRouter","removeCommunityImage","uploadCommunityImageRequestAction","ImageInsert","imagePath","profilePhoto","router","dispatch","imageInputRef","state","user","uploadImageDone","community","uploadCommunityImageDone","onClickImageUpload","route","split","current","click","onChangeImages","e","target","files","length","imageFormData","FormData","forEach","call","f","append","onRemoveImage","replace"],"mappings":";;;AAAA,OAAOA,KAAP,IAA6BC,IAA7B,EAAmCC,WAAnC,EAAgDC,MAAhD,QAA8D,OAA9D;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,EAAsBC,wBAAtB,QAAsD,oBAAtD;AACA,SAASC,mBAAT,QAAoC,UAApC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SACEC,oBADF,EAEEC,iCAFF,QAGO,yBAHP;;AAUA,SAASC,WAAT,OAAoE;AAAA,MAA7CC,SAA6C,QAA7CA,SAA6C;AAAA,MAAlCC,YAAkC,QAAlCA,YAAkC;AAClE,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAMO,QAAQ,GAAGb,WAAW,EAA5B;AACA,MAAMc,aAAa,GAAGhB,MAAM,CAAmB,IAAnB,CAA5B;;AAHkE,qBAItCG,WAAW,CAAC,UAACc,KAAD;AAAA,WAA+BA,KAAK,CAACC,IAArC;AAAA,GAAD,CAJ2B;AAAA,MAI1DC,eAJ0D,gBAI1DA,eAJ0D;;AAAA,sBAK7BhB,WAAW,CAC9C,UAACc,KAAD;AAAA,WAA+BA,KAAK,CAACG,SAArC;AAAA,GAD8C,CALkB;AAAA,MAK1DC,wBAL0D,iBAK1DA,wBAL0D;;AASlE,MAAMC,kBAAkB,GAAGvB,WAAW,CAAC,YAAM;AAC3C,QAAMwB,KAAK,GAAGT,MAAM,CAACS,KAAP,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAd;;AACA,QAAID,KAAK,KAAK,SAAV,IAAuB,CAACJ,eAA5B,EAA6C;AAAA;;AAC3C,+BAAAH,aAAa,CAACS,OAAd,gFAAuBC,KAAvB;AACD,KAFD,MAEO,IAAIH,KAAK,KAAK,WAAV,IAAyB,CAACF,wBAA9B,EAAwD;AAAA;;AAC7D,gCAAAL,aAAa,CAACS,OAAd,kFAAuBC,KAAvB;AACD;AACF,GAPqC,EAOnC,CAACV,aAAa,CAACS,OAAf,EAAwBN,eAAxB,EAAyCE,wBAAzC,CAPmC,CAAtC;AASA,MAAMM,cAAc,GAAG5B,WAAW,CAAC,UAAC6B,CAAD,EAAsC;AAAA;;AACvE,2BAAIA,CAAC,CAACC,MAAF,CAASC,KAAb,4CAAI,gBAAgBC,MAApB,EAA4B;AAC1B,UAAMR,KAAK,GAAGT,MAAM,CAACS,KAAP,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAd;AACA,UAAMQ,aAAa,GAAG,IAAIC,QAAJ,EAAtB;AACA,SAAGC,OAAH,CAAWC,IAAX,CAAgBP,CAAC,CAACC,MAAF,CAASC,KAAzB,EAAgC,UAAAM,CAAC,EAAI;AACnCJ,QAAAA,aAAa,CAACK,MAAd,CAAqB,OAArB,EAA8BD,CAA9B;AACD,OAFD;;AAGA,UAAIb,KAAK,KAAK,SAAd,EAAyB;AACvB,eAAOR,QAAQ,CAACV,wBAAwB,CAAC2B,aAAD,CAAzB,CAAf;AACD,OAFD,MAEO,IAAIT,KAAK,KAAK,WAAd,EAA2B;AAChC,eAAOR,QAAQ,CAACL,iCAAiC,CAACsB,aAAD,CAAlC,CAAf;AACD;AACF;AACF,GAbiC,EAa/B,EAb+B,CAAlC;AAeA,MAAMM,aAAa,GAAGvC,WAAW,CAAC,YAAM;AACtC,QAAMwB,KAAK,GAAGT,MAAM,CAACS,KAAP,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAd;;AACA,QAAIZ,SAAS,CAACmB,MAAd,EAAsB;AACpB,UAAIR,KAAK,KAAK,SAAd,EAAyB;AACvB,eAAOR,QAAQ,CAACX,WAAW,EAAZ,CAAf;AACD,OAFD,MAEO,IAAImB,KAAK,KAAK,WAAd,EAA2B;AAChC,eAAOR,QAAQ,CAACN,oBAAoB,EAArB,CAAf;AACD;AACF;AACF,GATgC,EAS9B,CAACG,SAAD,CAT8B,CAAjC;AAWA,sBACE,KAAC,mBAAD;AAAA,2BACE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,MAAM,MAHR;AAIE,QAAA,GAAG,EAAEI,aAJP;AAKE,QAAA,QAAQ,EAAEW;AALZ,QADF,eAQE,KAAC,MAAD;AAAQ,QAAA,OAAO,EAAEL,kBAAjB;AAAqC,QAAA,KAAK,EAAC,QAA3C;AAAoD,QAAA,SAAS,EAAC,eAA9D;AAAA,kBACGV,SAAS,CAACmB,MAAV,gBACC;AAAA,kCACE;AACE,YAAA,KAAK,EAAC,KADR;AAEE,YAAA,MAAM,EAAC,KAFT;AAGE,YAAA,GAAG,EAAEnB,SAAS,CAAC,CAAD,CAAT,CAAa2B,OAAb,CAAqB,YAArB,EAAmC,UAAnC,CAHP;AAIE,YAAA,GAAG,EAAC;AAJN,YADF,eAOE;AAAK,YAAA,OAAO,EAAED,aAAd;AAA6B,YAAA,SAAS,EAAC,gBAAvC;AAAA;AAAA,YAPF;AAAA,UADD,GAYGzB,YAAY,gBACd;AAAK,UAAA,KAAK,EAAC,KAAX;AAAiB,UAAA,MAAM,EAAC,KAAxB;AAA8B,UAAA,GAAG,EAAEA,YAAnC;AAAiD,UAAA,GAAG,EAAC;AAArD,UADc,gBAGd,KAAC,cAAD;AAAgB,UAAA,SAAS,EAAC;AAA1B;AAhBJ,QARF;AAAA;AADF,IADF;AAgCD;;AAED,4BAAef,IAAI,CAACa,WAAD,CAAnB","sourcesContent":["import React, { ChangeEvent, memo, useCallback, useRef } from 'react';\r\nimport { CameraOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStateInterface } from 'interfaces/RootState';\r\nimport { removeImage, uploadImageRequestAction } from 'actions/actionUser';\r\nimport { ProfileImgContainer } from './styles';\r\nimport { Button } from 'antd';\r\nimport { useRouter } from 'next/router';\r\nimport {\r\n  removeCommunityImage,\r\n  uploadCommunityImageRequestAction,\r\n} from 'actions/actionCommunity';\r\n\r\ninterface ImageInsertProps {\r\n  imagePath: string[];\r\n  profilePhoto: string | undefined;\r\n}\r\n\r\nfunction ImageInsert({ imagePath, profilePhoto }: ImageInsertProps) {\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n  const imageInputRef = useRef<HTMLInputElement>(null);\r\n  const { uploadImageDone } = useSelector((state: RootStateInterface) => state.user);\r\n  const { uploadCommunityImageDone } = useSelector(\r\n    (state: RootStateInterface) => state.community\r\n  );\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    const route = router.route.split('/')[1];\r\n    if (route === 'profile' && !uploadImageDone) {\r\n      imageInputRef.current?.click();\r\n    } else if (route === 'community' && !uploadCommunityImageDone) {\r\n      imageInputRef.current?.click();\r\n    }\r\n  }, [imageInputRef.current, uploadImageDone, uploadCommunityImageDone]);\r\n\r\n  const onChangeImages = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      const route = router.route.split('/')[1];\r\n      const imageFormData = new FormData();\r\n      [].forEach.call(e.target.files, f => {\r\n        imageFormData.append('image', f);\r\n      });\r\n      if (route === 'profile') {\r\n        return dispatch(uploadImageRequestAction(imageFormData));\r\n      } else if (route === 'community') {\r\n        return dispatch(uploadCommunityImageRequestAction(imageFormData));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const onRemoveImage = useCallback(() => {\r\n    const route = router.route.split('/')[1];\r\n    if (imagePath.length) {\r\n      if (route === 'profile') {\r\n        return dispatch(removeImage());\r\n      } else if (route === 'community') {\r\n        return dispatch(removeCommunityImage());\r\n      }\r\n    }\r\n  }, [imagePath]);\r\n\r\n  return (\r\n    <ProfileImgContainer>\r\n      <div>\r\n        <input\r\n          type=\"file\"\r\n          name=\"image\"\r\n          hidden\r\n          ref={imageInputRef}\r\n          onChange={onChangeImages}\r\n        />\r\n        <Button onClick={onClickImageUpload} shape=\"circle\" className=\"img-input-btn\">\r\n          {imagePath.length ? (\r\n            <>\r\n              <img\r\n                width=\"100\"\r\n                height=\"100\"\r\n                src={imagePath[0].replace(/\\/resize\\//, 'original')}\r\n                alt=\"profileimage\"\r\n              />\r\n              <div onClick={onRemoveImage} className=\"img-delete-btn\">\r\n                지우기\r\n              </div>\r\n            </>\r\n          ) : profilePhoto ? (\r\n            <img width=\"100\" height=\"100\" src={profilePhoto} alt=\"profileimage\" />\r\n          ) : (\r\n            <CameraOutlined className=\"img-input-icon\" />\r\n          )}\r\n        </Button>\r\n      </div>\r\n    </ProfileImgContainer>\r\n  );\r\n}\r\n\r\nexport default memo(ImageInsert);\r\n"]},"metadata":{},"sourceType":"module"}