{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"C:/Users/wlsdn/Desktop/next/community/front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { addPostRequestAction, removeImage, uploadImagesRequestAction } from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { Button, Form, Input } from 'antd';\nimport React, { memo, useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\nvar StyleButton = /*#__PURE__*/styled(Button).withConfig({\n  displayName: \"PostForm__StyleButton\",\n  componentId: \"sc-458sc1-0\"\n})([\"background:none;border:none;position:absolute;margin-left:-35px;color:#fff;margin-top:-5px;:hover{background:none;color:#039be5;}\"]);\n\nfunction PostForm() {\n  var router = useRouter();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      return formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch(addPostRequestAction({\n      formData: formData,\n      communityId: Number(router.query.id)\n    }));\n  }, [text, imagePaths]);\n  var imageInputRef = useRef(null);\n  var onClickImageUpload = useCallback(function () {\n    var _imageInputRef$curren;\n\n    (_imageInputRef$curren = imageInputRef.current) === null || _imageInputRef$curren === void 0 ? void 0 : _imageInputRef$curren.click();\n  }, [imageInputRef.current]);\n  var onChangeImages = useCallback(function (e) {\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    return dispatch(uploadImagesRequestAction(imageFormData));\n  }, []);\n  var onRemoveImage = useCallback(function (id) {\n    return function () {\n      return dispatch(removeImage(id));\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      height: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [imagePaths && /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        display: 'flex',\n        marginBottom: '1rem'\n      },\n      children: imagePaths.map(function (v, i) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            marginRight: '1rem',\n            background: 'rgba(0,0,0,.7)'\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: \"\".concat(process.env.NEXT_PUBLIC_BACK_URL_KEY, \"/\").concat(v),\n            style: {\n              width: '100px'\n            },\n            alt: v\n          }), /*#__PURE__*/_jsx(StyleButton, {\n            onClick: onRemoveImage(i),\n            children: /*#__PURE__*/_jsx(CloseCircleOutlined, {})\n          })]\n        }, v);\n      })\n    }), /*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\\uAE00\\uC744 \\uC791\\uC131\\uD558\\uC138\\uC694\",\n      style: {\n        color: '#fff',\n        background: 'rgba(0, 0, 0, 0.4)',\n        border: 'none',\n        resize: 'none',\n        height: '70px'\n      }\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInputRef,\n        onChange: onChangeImages\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          textAlign: 'end',\n          marginTop: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: onClickImageUpload,\n          children: \"\\uC5C5\\uB85C\\uB4DC\"\n        }), /*#__PURE__*/_jsx(Button, {\n          style: {\n            marginLeft: '0.5rem'\n          },\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"\\uC62C\\uB9AC\\uAE30\"\n        })]\n      })]\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(PostForm);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/PostForm.tsx"],"names":["addPostRequestAction","removeImage","uploadImagesRequestAction","useInput","Button","Form","Input","React","memo","useCallback","useEffect","useRef","useDispatch","useSelector","CloseCircleOutlined","styled","useRouter","StyleButton","PostForm","router","state","post","imagePaths","addPostDone","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","communityId","Number","query","id","imageInputRef","onClickImageUpload","current","click","onChangeImages","e","imageFormData","call","target","files","f","onRemoveImage","height","display","justifyContent","flexDirection","marginBottom","map","v","i","marginRight","background","process","env","NEXT_PUBLIC_BACK_URL_KEY","width","color","border","resize","textAlign","marginTop","marginLeft"],"mappings":";;;AAAA,SACEA,oBADF,EAEEC,WAFF,EAGEC,yBAHF,QAIO,uBAJP;AAKA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAA6BC,IAA7B,EAAmCC,WAAnC,EAAgDC,SAAhD,EAA2DC,MAA3D,QAAyE,OAAzE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,mBAAT,QAAoC,mBAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,IAAMC,WAAW,gBAAGF,MAAM,CAACX,MAAD,CAAT;AAAA;AAAA;AAAA,yIAAjB;;AAcA,SAASc,QAAT,GAAoB;AAClB,MAAMC,MAAM,GAAGH,SAAS,EAAxB;;AADkB,qBAEkBH,WAAW,CAC7C,UAACO,KAAD;AAAA,WAA+BA,KAAK,CAACC,IAArC;AAAA,GAD6C,CAF7B;AAAA,MAEVC,UAFU,gBAEVA,UAFU;AAAA,MAEEC,WAFF,gBAEEA,WAFF;;AAKlB,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AALkB,kBAMoBT,QAAQ,CAAS,EAAT,CAN5B;AAAA;AAAA,MAMXsB,IANW;AAAA,MAMLC,YANK;AAAA,MAMSC,OANT;;AAQlBjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,WAAJ,EAAiB;AACfI,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,GAJQ,EAIN,CAACJ,WAAD,CAJM,CAAT;AAMA,MAAMK,QAAQ,GAAGnB,WAAW,CAAC,YAAM;AACjC,QAAI,CAACgB,IAAD,IAAS,CAACA,IAAI,CAACI,IAAL,EAAd,EAA2B;AACzB,aAAOC,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAV,IAAAA,UAAU,CAACW,OAAX,CAAmB,UAAAC,CAAC;AAAA,aAAIH,QAAQ,CAACI,MAAT,CAAgB,OAAhB,EAAyBD,CAAzB,CAAJ;AAAA,KAApB;AACAH,IAAAA,QAAQ,CAACI,MAAT,CAAgB,SAAhB,EAA2BV,IAA3B;AACA,WAAOD,QAAQ,CACbxB,oBAAoB,CAAC;AAAE+B,MAAAA,QAAQ,EAARA,QAAF;AAAYK,MAAAA,WAAW,EAAEC,MAAM,CAAClB,MAAM,CAACmB,KAAP,CAAaC,EAAd;AAA/B,KAAD,CADP,CAAf;AAGD,GAV2B,EAUzB,CAACd,IAAD,EAAOH,UAAP,CAVyB,CAA5B;AAYA,MAAMkB,aAAa,GAAG7B,MAAM,CAAmB,IAAnB,CAA5B;AACA,MAAM8B,kBAAkB,GAAGhC,WAAW,CAAC,YAAM;AAAA;;AAC3C,6BAAA+B,aAAa,CAACE,OAAd,gFAAuBC,KAAvB;AACD,GAFqC,EAEnC,CAACH,aAAa,CAACE,OAAf,CAFmC,CAAtC;AAIA,MAAME,cAAc,GAAGnC,WAAW,CAAC,UAACoC,CAAD,EAAsC;AACvE,QAAMC,aAAa,GAAG,IAAId,QAAJ,EAAtB;AACA,OAAGC,OAAH,CAAWc,IAAX,CAAgBF,CAAC,CAACG,MAAF,CAASC,KAAzB,EAAgC,UAAAC,CAAC,EAAI;AACnCJ,MAAAA,aAAa,CAACX,MAAd,CAAqB,OAArB,EAA8Be,CAA9B;AACD,KAFD;AAGA,WAAO1B,QAAQ,CAACtB,yBAAyB,CAAC4C,aAAD,CAA1B,CAAf;AACD,GANiC,EAM/B,EAN+B,CAAlC;AAQA,MAAMK,aAAa,GAAG1C,WAAW,CAC/B,UAAC8B,EAAD;AAAA,WAAgB,YAAM;AACpB,aAAOf,QAAQ,CAACvB,WAAW,CAACsC,EAAD,CAAZ,CAAf;AACD,KAFD;AAAA,GAD+B,EAI/B,EAJ+B,CAAjC;AAOA,sBACE,MAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLa,MAAAA,MAAM,EAAE,MADH;AAELC,MAAAA,OAAO,EAAE,MAFJ;AAGLC,MAAAA,cAAc,EAAE,QAHX;AAILC,MAAAA,aAAa,EAAE;AAJV,KADT;AAOE,IAAA,OAAO,EAAC,qBAPV;AAQE,IAAA,QAAQ,EAAE3B,QARZ;AAAA,eAUGN,UAAU,iBACT;AACE,MAAA,KAAK,EAAE;AACL+B,QAAAA,OAAO,EAAE,MADJ;AAELG,QAAAA,YAAY,EAAE;AAFT,OADT;AAAA,gBAMGlC,UAAU,CAACmC,GAAX,CAAe,UAACC,CAAD,EAAIC,CAAJ;AAAA,4BACd;AAAa,UAAA,KAAK,EAAE;AAAEC,YAAAA,WAAW,EAAE,MAAf;AAAuBC,YAAAA,UAAU,EAAE;AAAnC,WAApB;AAAA,kCACE;AACE,YAAA,GAAG,YAAKC,OAAO,CAACC,GAAR,CAAYC,wBAAjB,cAA6CN,CAA7C,CADL;AAEE,YAAA,KAAK,EAAE;AAAEO,cAAAA,KAAK,EAAE;AAAT,aAFT;AAGE,YAAA,GAAG,EAAEP;AAHP,YADF,eAME,KAAC,WAAD;AAAa,YAAA,OAAO,EAAEP,aAAa,CAACQ,CAAD,CAAnC;AAAA,mCACE,KAAC,mBAAD;AADF,YANF;AAAA,WAAUD,CAAV,CADc;AAAA,OAAf;AANH,MAXJ,eA+BE,KAAC,KAAD,CAAO,QAAP;AACE,MAAA,KAAK,EAAEjC,IADT;AAEE,MAAA,QAAQ,EAAEC,YAFZ;AAGE,MAAA,SAAS,EAAE,GAHb;AAIE,MAAA,WAAW,EAAC,6CAJd;AAKE,MAAA,KAAK,EAAE;AACLwC,QAAAA,KAAK,EAAE,MADF;AAELL,QAAAA,UAAU,EAAE,oBAFP;AAGLM,QAAAA,MAAM,EAAE,MAHH;AAILC,QAAAA,MAAM,EAAE,MAJH;AAKLhB,QAAAA,MAAM,EAAE;AALH;AALT,MA/BF,eA4CE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,QAAQ,MAHV;AAIE,QAAA,MAAM,MAJR;AAKE,QAAA,GAAG,EAAEZ,aALP;AAME,QAAA,QAAQ,EAAEI;AANZ,QADF,eASE;AACE,QAAA,KAAK,EAAE;AACLyB,UAAAA,SAAS,EAAE,KADN;AAELC,UAAAA,SAAS,EAAE;AAFN,SADT;AAAA,gCAME,KAAC,MAAD;AAAQ,UAAA,OAAO,EAAE7B,kBAAjB;AAAA;AAAA,UANF,eAOE,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAE;AAAE8B,YAAAA,UAAU,EAAE;AAAd,WAAf;AAAyC,UAAA,IAAI,EAAC,SAA9C;AAAwD,UAAA,QAAQ,EAAC,QAAjE;AAAA;AAAA,UAPF;AAAA,QATF;AAAA,MA5CF;AAAA,IADF;AAoED;;AAED,4BAAe/D,IAAI,CAACU,QAAD,CAAnB","sourcesContent":["import {\n  addPostRequestAction,\n  removeImage,\n  uploadImagesRequestAction,\n} from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { Button, Form, Input } from 'antd';\nimport React, { ChangeEvent, memo, useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootStateInterface } from '../interfaces/RootState';\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport { useRouter } from 'next/router';\n\nconst StyleButton = styled(Button)`\n  background: none;\n  border: none;\n  position: absolute;\n  margin-left: -35px;\n  color: #fff;\n  margin-top: -5px;\n\n  :hover {\n    background: none;\n    color: #039be5;\n  }\n`;\n\nfunction PostForm() {\n  const router = useRouter();\n  const { imagePaths, addPostDone } = useSelector(\n    (state: RootStateInterface) => state.post\n  );\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput<string>('');\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요');\n    }\n    const formData = new FormData();\n    imagePaths.forEach(p => formData.append('image', p));\n    formData.append('content', text);\n    return dispatch(\n      addPostRequestAction({ formData, communityId: Number(router.query.id) })\n    );\n  }, [text, imagePaths]);\n\n  const imageInputRef = useRef<HTMLInputElement>(null);\n  const onClickImageUpload = useCallback(() => {\n    imageInputRef.current?.click();\n  }, [imageInputRef.current]);\n\n  const onChangeImages = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    return dispatch(uploadImagesRequestAction(imageFormData));\n  }, []);\n\n  const onRemoveImage = useCallback(\n    (id: number) => () => {\n      return dispatch(removeImage(id));\n    },\n    []\n  );\n\n  return (\n    <Form\n      style={{\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n      encType=\"multipart/form-data\"\n      onFinish={onSubmit}\n    >\n      {imagePaths && (\n        <div\n          style={{\n            display: 'flex',\n            marginBottom: '1rem',\n          }}\n        >\n          {imagePaths.map((v, i) => (\n            <div key={v} style={{ marginRight: '1rem', background: 'rgba(0,0,0,.7)' }}>\n              <img\n                src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${v}`}\n                style={{ width: '100px' }}\n                alt={v}\n              />\n              <StyleButton onClick={onRemoveImage(i)}>\n                <CloseCircleOutlined />\n              </StyleButton>\n            </div>\n          ))}\n        </div>\n      )}\n      <Input.TextArea\n        value={text}\n        onChange={onChangeText}\n        maxLength={140}\n        placeholder=\"글을 작성하세요\"\n        style={{\n          color: '#fff',\n          background: 'rgba(0, 0, 0, 0.4)',\n          border: 'none',\n          resize: 'none',\n          height: '70px',\n        }}\n      />\n      <div>\n        <input\n          type=\"file\"\n          name=\"image\"\n          multiple\n          hidden\n          ref={imageInputRef}\n          onChange={onChangeImages}\n        />\n        <div\n          style={{\n            textAlign: 'end',\n            marginTop: '0.5rem',\n          }}\n        >\n          <Button onClick={onClickImageUpload}>업로드</Button>\n          <Button style={{ marginLeft: '0.5rem' }} type=\"primary\" htmlType=\"submit\">\n            올리기\n          </Button>\n        </div>\n      </div>\n    </Form>\n  );\n}\n\nexport default memo(PostForm);\n"]},"metadata":{},"sourceType":"module"}