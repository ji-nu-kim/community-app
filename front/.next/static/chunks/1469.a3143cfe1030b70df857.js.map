{"version":3,"sources":["webpack://_N_E/./components/CommentForm.tsx","webpack://_N_E/./hooks/useInput.tsx"],"names":["CommentForm","postId","dispatch","useDispatch","me","useSelector","state","user","addCommentDone","post","useInput","comment","onChangeComment","setComment","useEffect","onSubmitComment","useCallback","trim","addCommentRequestAction","alert","onFinish","style","marginTop","value","onChange","rows","placeholder","background","border","color","resize","height","type","htmlType","memo","initialValue","useState","setValue","e","target"],"mappings":"qMAWA,SAASA,EAAT,GAAmD,IAA5BC,EAA4B,EAA5BA,OACfC,GAAWC,UACTC,GAAOC,SAAY,SAACC,GAAD,OAA+BA,EAAMC,QAAxDH,GACAI,GAAmBH,SAAY,SAACC,GAAD,OAA+BA,EAAMG,QAApED,eAHyC,GAIFE,OAAiB,IAJf,eAI1CC,EAJ0C,KAIjCC,EAJiC,KAIhBC,EAJgB,MAMjDC,gBAAU,WACJN,GACFK,EAAW,MAEZ,CAACL,IAEJ,IAAMO,GAAkBC,kBAAY,WAClC,GAAKL,EAAQM,QAAWN,EAKxB,OAAIP,EACKF,GACLgB,QAAwB,CACtBP,UACAV,iBAJN,EAJEkB,MAAM,uDAYP,CAACR,EAASV,EAAQG,IAErB,OACE,SAAC,IAAD,CAAMgB,SAAUL,EAAhB,UACE,UAAC,SAAD,CACEM,MAAO,CACLC,UAAW,UAFf,WAKE,SAAC,aAAD,CACEC,MAAOZ,EACPa,SAAUZ,EACVa,KAAM,EACNC,YAAY,oDACZL,MAAO,CACLM,WAAY,oBACZC,OAAQ,OACRC,MAAO,OACPC,OAAQ,OACRC,OAAQ,WAGZ,SAAC,IAAD,CAAQC,KAAK,UAAUC,SAAS,SAASZ,MAAO,CAAEC,UAAW,SAA7D,+BAQR,WAAeY,UAAKlC,I,gDCvDpB,IAVA,SAAqBmC,GAAwD,OACjDC,cAASD,GAA5BZ,EADoE,KAC7Dc,EAD6D,KAO3E,MAAO,CAACd,GAJQP,kBAAY,SAAAsB,GAC1BD,EAASC,EAAEC,OAAOhB,SACjB,IAEqBc","file":"static/chunks/1469.a3143cfe1030b70df857.js","sourcesContent":["import { Form, Input, Button } from 'antd';\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { addCommentRequestAction } from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { RootStateInterface } from '../interfaces/RootState';\nimport { useDispatch, useSelector } from 'react-redux';\n\ninterface CommentFormProps {\n  postId: number;\n}\n\nfunction CommentForm({ postId }: CommentFormProps) {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state: RootStateInterface) => state.user);\n  const { addCommentDone } = useSelector((state: RootStateInterface) => state.post);\n  const [comment, onChangeComment, setComment] = useInput<string>('');\n\n  useEffect(() => {\n    if (addCommentDone) {\n      setComment('');\n    }\n  }, [addCommentDone]);\n\n  const onSubmitComment = useCallback(() => {\n    if (!comment.trim() || !comment) {\n      alert('댓글을 입력하세요');\n      return;\n    }\n\n    if (me) {\n      return dispatch(\n        addCommentRequestAction({\n          comment,\n          postId,\n        })\n      );\n    }\n  }, [comment, postId, me]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item\n        style={{\n          marginTop: '0.5rem',\n        }}\n      >\n        <Input.TextArea\n          value={comment}\n          onChange={onChangeComment}\n          rows={4}\n          placeholder=\"댓글을 작성하세요\"\n          style={{\n            background: 'rgba(0, 0, 0, .4)',\n            border: 'none',\n            color: '#fff',\n            resize: 'none',\n            height: '70px',\n          }}\n        />\n        <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: '.5rem' }}>\n          등록\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default memo(CommentForm);\n","import { useState, useCallback, Dispatch, SetStateAction } from 'react';\n\nfunction useInput<T>(initialValue: T): [T, any, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState(initialValue);\n\n  const handler = useCallback(e => {\n    setValue(e.target.value);\n  }, []);\n\n  return [value, handler, setValue];\n}\n\nexport default useInput;\n"],"sourceRoot":""}