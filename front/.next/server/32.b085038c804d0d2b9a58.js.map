{"version":3,"sources":["webpack:///./components/CategoryList/styles.tsx","webpack:///./components/CategoryList/index.tsx"],"names":["CheckBoxContainer","styled","fieldset","ColorAni","CategoryList","mainCategories","setCategories","categories","onChangeCheckBox","useCallback","name","e","length","target","checked","prev","filter","v","alert","map","category","includes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEO,MAAMA,iBAAiB,gBAAGC,oCAAM,CAACC,QAAV;AAAA;AAAA;AAAA,kMAYTC,8BAZS,CAAvB,C;;;;ACFP;AACA;;AAQA,SAASC,YAAT,CAAsB;AACpBC,gBADoB;AAEpBC,eAFoB;AAGpBC;AAHoB,CAAtB,EAIsB;AACpB,QAAMC,gBAAgB,GAAGC,sCAAW,CACjCC,IAAD,IAAmBC,CAAD,IAAY;AAC5B,QAAIJ,UAAU,CAACK,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAID,CAAC,CAACE,MAAF,CAASC,OAAb,EAAsB;AACpBR,qBAAa,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUL,IAAV,CAAT,CAAb;AACD,OAFD,MAEO;AACLJ,qBAAa,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUC,MAAV,CAAiBC,CAAC,IAAIA,CAAC,IAAIP,IAA3B,CAAT,CAAb;AACD;AACF,KAND,MAMO;AACL,UAAIC,CAAC,CAACE,MAAF,CAASC,OAAb,EAAsB;AACpBI,aAAK,CAAC,gBAAD,CAAL;AACAP,SAAC,CAACE,MAAF,CAASC,OAAT,GAAmB,KAAnB;AACD,OAHD,MAGO;AACLR,qBAAa,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUC,MAAV,CAAiBC,CAAC,IAAIA,CAAC,IAAIP,IAA3B,CAAT,CAAb;AACD;AACF;AACF,GAhBiC,EAiBlC,CAACH,UAAD,CAjBkC,CAApC;AAoBA,sBACE,4BAAC,iBAAD;AAAA,cACGF,cAAc,IACbA,cAAc,CAACc,GAAf,CAAmBC,QAAQ,iBACzB;AAAA,iBACGb,UAAU,CAACc,QAAX,CAAoBD,QAAQ,CAACV,IAA7B,iBACC;AACE,YAAI,EAAC,UADP;AAEE,UAAE,EAAEU,QAAQ,CAACV,IAFf;AAGE,gBAAQ,EAAEF,gBAAgB,CAACY,QAAQ,CAACV,IAAV,CAH5B;AAIE,sBAAc;AAJhB,QADD,gBAQC;AACE,YAAI,EAAC,UADP;AAEE,UAAE,EAAEU,QAAQ,CAACV,IAFf;AAGE,gBAAQ,EAAEF,gBAAgB,CAACY,QAAQ,CAACV,IAAV;AAH5B,QATJ,eAeE;AAAO,eAAO,EAAEU,QAAQ,CAACV,IAAzB;AAAA,kBAAgCU,QAAQ,CAACV;AAAzC,QAfF;AAAA,OAAUU,QAAQ,CAACV,IAAnB,CADF;AAFJ,IADF;AAwBD;;AAEcN,yGAAf,E","file":"32.b085038c804d0d2b9a58.js","sourcesContent":["import styled from 'styled-components';\nimport { ColorAni } from 'utils/stylesUtil';\n\nexport const CheckBoxContainer = styled.fieldset`\n  margin: 0.5rem 0;\n  display: grid;\n  grid-template-columns: repeat(5, 85px);\n  grid-template-rows: auto;\n\n  div {\n    label {\n      color: #fff;\n      margin-left: 4px;\n      :hover {\n        color: coral;\n        animation: ${ColorAni} 0.5s infinite linear;\n      }\n    }\n  }\n`;\n","import { ICategory } from 'interfaces/db';\nimport React, { Dispatch, SetStateAction, useCallback } from 'react';\nimport { CheckBoxContainer } from './styles';\n\ninterface CategoryListProps {\n  mainCategories: ICategory[];\n  setCategories: Dispatch<SetStateAction<string[]>>;\n  categories: string[];\n}\n\nfunction CategoryList({\n  mainCategories,\n  setCategories,\n  categories,\n}: CategoryListProps) {\n  const onChangeCheckBox = useCallback(\n    (name: string) => (e: any) => {\n      if (categories.length < 5) {\n        if (e.target.checked) {\n          setCategories(prev => [...prev, name]);\n        } else {\n          setCategories(prev => [...prev].filter(v => v != name));\n        }\n      } else {\n        if (e.target.checked) {\n          alert('5개만 선택할 수 있습니다');\n          e.target.checked = false;\n        } else {\n          setCategories(prev => [...prev].filter(v => v != name));\n        }\n      }\n    },\n    [categories]\n  );\n\n  return (\n    <CheckBoxContainer>\n      {mainCategories &&\n        mainCategories.map(category => (\n          <div key={category.name}>\n            {categories.includes(category.name) ? (\n              <input\n                type=\"checkbox\"\n                id={category.name}\n                onChange={onChangeCheckBox(category.name)}\n                defaultChecked\n              />\n            ) : (\n              <input\n                type=\"checkbox\"\n                id={category.name}\n                onChange={onChangeCheckBox(category.name)}\n              />\n            )}\n            <label htmlFor={category.name}>{category.name}</label>\n          </div>\n        ))}\n    </CheckBoxContainer>\n  );\n}\n\nexport default CategoryList;\n"],"sourceRoot":""}