{"version":3,"sources":["webpack://_N_E/./components/CategoryList/styles.tsx","webpack://_N_E/./components/CategoryList/index.tsx"],"names":["CheckBoxContainer","styled","fieldset","ColorAni","CategoryList","mainCategories","setCategories","categories","onChangeCheckBox","useCallback","name","e","length","target","checked","prev","filter","v","alert","map","category","includes","type","id","onChange","defaultChecked","htmlFor"],"mappings":"2KAGaA,EAAoBC,IAAOC,SAAV,4EAAGD,CAAH,6LAYTE,KC8CNC,UAnDf,YAIsB,IAHpBC,EAGoB,EAHpBA,eACAC,EAEoB,EAFpBA,cACAC,EACoB,EADpBA,WAEMC,EAAmBC,uBACvB,SAACC,GAAD,OAAkB,SAACC,GACbJ,EAAWK,OAAS,EAClBD,EAAEE,OAAOC,QACXR,GAAc,SAAAS,GAAI,4BAAQA,GAAR,CAAcL,OAEhCJ,GAAc,SAAAS,GAAI,OAAI,YAAIA,GAAMC,QAAO,SAAAC,GAAC,OAAIA,GAAKP,QAG/CC,EAAEE,OAAOC,SACXI,MAAM,oEACNP,EAAEE,OAAOC,SAAU,GAEnBR,GAAc,SAAAS,GAAI,OAAI,YAAIA,GAAMC,QAAO,SAAAC,GAAC,OAAIA,GAAKP,WAIvD,CAACH,IAGH,OACE,cAACP,EAAD,UACGK,GACCA,EAAec,KAAI,SAAAC,GAAQ,OACzB,gCACGb,EAAWc,SAASD,EAASV,MAC5B,uBACEY,KAAK,WACLC,GAAIH,EAASV,KACbc,SAAUhB,EAAiBY,EAASV,MACpCe,gBAAc,IAGhB,uBACEH,KAAK,WACLC,GAAIH,EAASV,KACbc,SAAUhB,EAAiBY,EAASV,QAGxC,uBAAOgB,QAASN,EAASV,KAAzB,SAAgCU,EAASV,SAfjCU,EAASV","file":"static/chunks/40.10489f297b0e0cfd5ae0.js","sourcesContent":["import styled from 'styled-components';\r\nimport { ColorAni } from 'utils/stylesUtil';\r\n\r\nexport const CheckBoxContainer = styled.fieldset`\r\n  margin: 0.5rem 0;\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 85px);\r\n  grid-template-rows: auto;\r\n\r\n  div {\r\n    label {\r\n      color: #fff;\r\n      margin-left: 4px;\r\n      :hover {\r\n        color: coral;\r\n        animation: ${ColorAni} 0.5s infinite linear;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { ICategory } from 'interfaces/db';\r\nimport React, { Dispatch, SetStateAction, useCallback } from 'react';\r\nimport { CheckBoxContainer } from './styles';\r\n\r\ninterface CategoryListProps {\r\n  mainCategories: ICategory[];\r\n  setCategories: Dispatch<SetStateAction<string[]>>;\r\n  categories: string[];\r\n}\r\n\r\nfunction CategoryList({\r\n  mainCategories,\r\n  setCategories,\r\n  categories,\r\n}: CategoryListProps) {\r\n  const onChangeCheckBox = useCallback(\r\n    (name: string) => (e: any) => {\r\n      if (categories.length < 5) {\r\n        if (e.target.checked) {\r\n          setCategories(prev => [...prev, name]);\r\n        } else {\r\n          setCategories(prev => [...prev].filter(v => v != name));\r\n        }\r\n      } else {\r\n        if (e.target.checked) {\r\n          alert('5개만 선택할 수 있습니다');\r\n          e.target.checked = false;\r\n        } else {\r\n          setCategories(prev => [...prev].filter(v => v != name));\r\n        }\r\n      }\r\n    },\r\n    [categories]\r\n  );\r\n\r\n  return (\r\n    <CheckBoxContainer>\r\n      {mainCategories &&\r\n        mainCategories.map(category => (\r\n          <div key={category.name}>\r\n            {categories.includes(category.name) ? (\r\n              <input\r\n                type=\"checkbox\"\r\n                id={category.name}\r\n                onChange={onChangeCheckBox(category.name)}\r\n                defaultChecked\r\n              />\r\n            ) : (\r\n              <input\r\n                type=\"checkbox\"\r\n                id={category.name}\r\n                onChange={onChangeCheckBox(category.name)}\r\n              />\r\n            )}\r\n            <label htmlFor={category.name}>{category.name}</label>\r\n          </div>\r\n        ))}\r\n    </CheckBoxContainer>\r\n  );\r\n}\r\n\r\nexport default CategoryList;\r\n"],"sourceRoot":""}