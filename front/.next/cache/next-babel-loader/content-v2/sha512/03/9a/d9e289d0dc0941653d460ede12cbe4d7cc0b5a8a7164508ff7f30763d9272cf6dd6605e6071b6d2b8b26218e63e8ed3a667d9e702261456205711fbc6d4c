{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { MessageOutlined, MoreOutlined } from '@ant-design/icons';\nimport { loadPostsRequestAction } from 'actions/actionPost';\nimport CommentForm from 'components/CommentForm';\nimport CommentEditModal from 'components/Modals/CommentEditModal';\nimport CommentSettingModal from 'components/Modals/CommentSettingModal';\nimport PostEditModal from 'components/Modals/PostEditModal';\nimport PostSettingModal from 'components/Modals/PostSettingModal';\nimport PostForm from 'components/PostForm';\nimport moment from 'moment';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostContainer } from './styles';\n\nfunction Post(_ref) {\n  var singleCommunity = _ref.singleCommunity,\n      communityUser = _ref.communityUser;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost,\n      loadPostsLoading = _useSelector.loadPostsLoading,\n      updateCommentDone = _useSelector.updateCommentDone;\n\n  var _useState = useState(false),\n      editMode = _useState[0],\n      setEditMode = _useState[1];\n\n  var _useState2 = useState(false),\n      showPostSettingButton = _useState2[0],\n      setShowPostSettingButton = _useState2[1]; // 포스트설정 모달 보여주기\n\n\n  var _useState3 = useState(0),\n      CurrentPostSettingButton = _useState3[0],\n      setCurrentPostSettingButton = _useState3[1]; // 현재 보여지고 있는 포스트설정 모달\n\n\n  var _useState4 = useState(0),\n      currentModifyPost = _useState4[0],\n      setCurrentModifyPost = _useState4[1]; // 현재 수정중인 포스트\n\n\n  var _useState5 = useState(false),\n      showCommentSettingButton = _useState5[0],\n      setShowCommentSettingButton = _useState5[1];\n\n  var _useState6 = useState(0),\n      currentCommentSettingButton = _useState6[0],\n      setCurrentCommentSettingButton = _useState6[1];\n\n  var _useState7 = useState(0),\n      currentModifyComment = _useState7[0],\n      setCurrentModifyComment = _useState7[1];\n\n  var _useState8 = useState(false),\n      openPostCommentForm = _useState8[0],\n      setOpenPostCommentForm = _useState8[1];\n\n  var _useState9 = useState(0),\n      currentPostCommentForm = _useState9[0],\n      setCurrentPostCommentForm = _useState9[1];\n\n  var postContainerRef = useRef(null);\n  var onClickPostSettingButton = useCallback(function (postId) {\n    return function () {\n      setCurrentPostSettingButton(postId);\n      setShowPostSettingButton(true);\n    };\n  }, []);\n  var onClickCommentSettingButton = useCallback(function (commentId) {\n    return function () {\n      setCurrentCommentSettingButton(commentId);\n      setShowCommentSettingButton(true);\n    };\n  }, []);\n  var onTogglePostCommentForm = useCallback(function (postId) {\n    return function () {\n      setCurrentPostCommentForm(postId);\n      setOpenPostCommentForm(function (prev) {\n        return !prev;\n      });\n    };\n  }, []);\n  var onCloseSettingModal = useCallback(function () {\n    if (showPostSettingButton || showCommentSettingButton) {\n      setShowPostSettingButton(false);\n      setShowCommentSettingButton(false);\n    }\n  }, [showPostSettingButton, showCommentSettingButton]);\n  useEffect(function () {\n    if (updateCommentDone) {\n      setEditMode(false);\n    }\n  }, [updateCommentDone]);\n  useEffect(function () {\n    var postContainer = postContainerRef.current;\n    if (!postContainer) return;\n\n    function onScroll(e) {\n      if (communityUser && mainPosts.length) {\n        if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight - 300) {\n          if (hasMorePost && !loadPostsLoading) {\n            var lastId = mainPosts[mainPosts.length - 1].id;\n            dispatch(loadPostsRequestAction({\n              communityId: singleCommunity.id,\n              postId: lastId\n            }));\n          }\n        }\n      }\n    }\n\n    postContainer.addEventListener('scroll', onScroll);\n    return function () {\n      return postContainer.removeEventListener('scroll', onScroll);\n    };\n  }, [communityUser, mainPosts, hasMorePost, loadPostsLoading, singleCommunity, postContainerRef.current]);\n  return /*#__PURE__*/_jsx(PostContainer, {\n    onClick: onCloseSettingModal,\n    ref: postContainerRef,\n    children: communityUser ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"post-form-container\",\n        children: /*#__PURE__*/_jsx(PostForm, {})\n      }), mainPosts.length ? /*#__PURE__*/_jsx(_Fragment, {\n        children: mainPosts.map(function (post) {\n          return /*#__PURE__*/_jsxs(\"div\", {\n            className: \"post-body-container\",\n            children: [editMode && post.id === currentModifyPost && /*#__PURE__*/_jsx(PostEditModal, {\n              setEditMode: setEditMode,\n              setCurrentModifyPost: setCurrentModifyPost,\n              currentPostText: post.content,\n              postId: post.id,\n              communityId: singleCommunity.id\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"header post-body-header\",\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: \"header-left\",\n                children: [/*#__PURE__*/_jsx(\"span\", {\n                  children: post.User.profilePhoto ? /*#__PURE__*/_jsx(\"img\", {\n                    className: \"left-profile-image\",\n                    src: \"\".concat(process.env.NEXT_PUBLIC_BACK_URL_KEY, \"/\").concat(post.User.profilePhoto),\n                    alt: \"profile image\"\n                  }) : /*#__PURE__*/_jsx(\"div\", {\n                    className: \"left-fake-image\",\n                    children: post.User.nickname[0]\n                  })\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: \"left-nickname\",\n                  children: post.User.nickname\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"header-right\",\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  className: \"right-day\",\n                  children: moment(post.createdAt).locale('ko').format('LLL')\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: \"right-buttons\",\n                  onClick: onClickPostSettingButton(post.id),\n                  children: /*#__PURE__*/_jsx(MoreOutlined, {})\n                }), showPostSettingButton && post.id === CurrentPostSettingButton && /*#__PURE__*/_jsx(PostSettingModal, {\n                  setCurrentModifyPost: setCurrentModifyPost,\n                  setEditMode: setEditMode,\n                  postId: post.id,\n                  communityId: singleCommunity.id,\n                  postOwnerId: post.User.id,\n                  communityUserId: communityUser.id,\n                  content: post.content\n                })]\n              })]\n            }), post.Images.length ? /*#__PURE__*/_jsx(\"img\", {\n              src: \"\".concat(process.env.NEXT_PUBLIC_BACK_URL_KEY, \"/\").concat(post.Images[0].src),\n              alt: \"image\",\n              className: \"post-image\"\n            }) : null, /*#__PURE__*/_jsx(\"div\", {\n              className: \"post-text\",\n              children: post.content\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"post-comment-info\",\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                onClick: onTogglePostCommentForm(post.id),\n                style: {\n                  cursor: 'pointer'\n                },\n                children: [/*#__PURE__*/_jsx(\"span\", {\n                  style: {\n                    marginRight: '4px'\n                  },\n                  children: /*#__PURE__*/_jsx(MessageOutlined, {})\n                }), post.Comments.length ? \"\\uB313\\uAE00 \".concat(post.Comments.length, \"\\uAC1C \\uBAA8\\uB450\\uBCF4\\uAE30\") : '댓글 작성하기']\n              }), openPostCommentForm && currentPostCommentForm === post.id && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [post.Comments && post.Comments.map(function (comment) {\n                  return /*#__PURE__*/_jsxs(\"div\", {\n                    className: \"post-comment-container\",\n                    children: [editMode && comment.id === currentModifyComment && /*#__PURE__*/_jsx(CommentEditModal, {\n                      setEditMode: setEditMode,\n                      setCurrentModifyComment: setCurrentModifyComment,\n                      currentCommentText: comment.content,\n                      postId: post.id,\n                      commentId: comment.id\n                    }), /*#__PURE__*/_jsxs(\"div\", {\n                      className: \"header comment-header\",\n                      children: [/*#__PURE__*/_jsxs(\"div\", {\n                        className: \"header-left\",\n                        children: [/*#__PURE__*/_jsx(\"span\", {\n                          children: comment.User.profilePhoto ? /*#__PURE__*/_jsx(\"img\", {\n                            className: \"left-profile-image\",\n                            src: \"\".concat(process.env.NEXT_PUBLIC_BACK_URL_KEY, \"/\").concat(comment.User.profilePhoto),\n                            alt: \"profile image\"\n                          }) : /*#__PURE__*/_jsx(\"div\", {\n                            className: \"left-fake-image\",\n                            children: comment.User.nickname[0]\n                          })\n                        }), /*#__PURE__*/_jsx(\"div\", {\n                          className: \"left-nickname\",\n                          children: comment.User.nickname\n                        })]\n                      }), /*#__PURE__*/_jsxs(\"div\", {\n                        className: \"header-right\",\n                        children: [/*#__PURE__*/_jsx(\"div\", {\n                          className: \"right-day\",\n                          children: moment(comment.createdAt).locale('ko').format('LLL')\n                        }), /*#__PURE__*/_jsx(\"div\", {\n                          className: \"right-buttons\",\n                          onClick: onClickCommentSettingButton(comment.id),\n                          children: /*#__PURE__*/_jsx(MoreOutlined, {})\n                        })]\n                      }), showCommentSettingButton && comment.id === currentCommentSettingButton && /*#__PURE__*/_jsx(CommentSettingModal, {\n                        setCurrentModifyComment: setCurrentModifyComment,\n                        setEditMode: setEditMode,\n                        postId: post.id,\n                        commentId: comment.id,\n                        commentOwnerId: comment.User.id,\n                        communityUserId: communityUser.id,\n                        content: comment.content\n                      })]\n                    }), /*#__PURE__*/_jsx(\"div\", {\n                      className: \"comment-text\",\n                      children: comment.content\n                    })]\n                  }, comment.id);\n                }), /*#__PURE__*/_jsx(\"div\", {\n                  className: \"post-comment-form-container\",\n                  children: /*#__PURE__*/_jsx(CommentForm, {\n                    postId: post.id\n                  })\n                })]\n              })]\n            })]\n          }, post.id);\n        })\n      }) : null]\n    }) : /*#__PURE__*/_jsx(\"div\", {\n      className: \"visitor-post\",\n      children: \"\\uCEE4\\uBBA4\\uB2C8\\uD2F0\\uC720\\uC800\\uB9CC \\uBCFC \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"\n    })\n  });\n}\n\nexport default /*#__PURE__*/memo(Post);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/CommunityBody/Post/index.tsx"],"names":["MessageOutlined","MoreOutlined","loadPostsRequestAction","CommentForm","CommentEditModal","CommentSettingModal","PostEditModal","PostSettingModal","PostForm","moment","React","memo","useCallback","useEffect","useState","useRef","useDispatch","useSelector","PostContainer","Post","singleCommunity","communityUser","dispatch","state","post","mainPosts","hasMorePost","loadPostsLoading","updateCommentDone","editMode","setEditMode","showPostSettingButton","setShowPostSettingButton","CurrentPostSettingButton","setCurrentPostSettingButton","currentModifyPost","setCurrentModifyPost","showCommentSettingButton","setShowCommentSettingButton","currentCommentSettingButton","setCurrentCommentSettingButton","currentModifyComment","setCurrentModifyComment","openPostCommentForm","setOpenPostCommentForm","currentPostCommentForm","setCurrentPostCommentForm","postContainerRef","onClickPostSettingButton","postId","onClickCommentSettingButton","commentId","onTogglePostCommentForm","prev","onCloseSettingModal","postContainer","current","onScroll","e","length","target","scrollTop","scrollHeight","offsetHeight","lastId","id","communityId","addEventListener","removeEventListener","map","content","User","profilePhoto","process","env","NEXT_PUBLIC_BACK_URL_KEY","nickname","createdAt","locale","format","Images","src","cursor","marginRight","Comments","comment"],"mappings":"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","sourcesContent":["import { MessageOutlined, MoreOutlined } from '@ant-design/icons';\r\nimport { loadPostsRequestAction } from 'actions/actionPost';\r\nimport CommentForm from 'components/CommentForm';\r\nimport CommentEditModal from 'components/Modals/CommentEditModal';\r\nimport CommentSettingModal from 'components/Modals/CommentSettingModal';\r\nimport PostEditModal from 'components/Modals/PostEditModal';\r\nimport PostSettingModal from 'components/Modals/PostSettingModal';\r\nimport PostForm from 'components/PostForm';\r\nimport { ICommunity, IUserInfo } from 'interfaces/db';\r\nimport { RootStateInterface } from 'interfaces/RootState';\r\nimport moment from 'moment';\r\nimport React, { memo, useCallback, useEffect, useState } from 'react';\r\nimport { useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PostContainer } from './styles';\r\n\r\ninterface PostProps {\r\n  singleCommunity: ICommunity;\r\n  communityUser: IUserInfo | undefined;\r\n}\r\n\r\nfunction Post({ singleCommunity, communityUser }: PostProps) {\r\n  const dispatch = useDispatch();\r\n  const { mainPosts, hasMorePost, loadPostsLoading, updateCommentDone } = useSelector(\r\n    (state: RootStateInterface) => state.post\r\n  );\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [showPostSettingButton, setShowPostSettingButton] = useState(false); // 포스트설정 모달 보여주기\r\n  const [CurrentPostSettingButton, setCurrentPostSettingButton] = useState(0); // 현재 보여지고 있는 포스트설정 모달\r\n  const [currentModifyPost, setCurrentModifyPost] = useState(0); // 현재 수정중인 포스트\r\n  const [showCommentSettingButton, setShowCommentSettingButton] = useState(false);\r\n  const [currentCommentSettingButton, setCurrentCommentSettingButton] = useState(0);\r\n  const [currentModifyComment, setCurrentModifyComment] = useState(0);\r\n  const [openPostCommentForm, setOpenPostCommentForm] = useState(false);\r\n  const [currentPostCommentForm, setCurrentPostCommentForm] = useState(0);\r\n  const postContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const onClickPostSettingButton = useCallback(\r\n    (postId: number) => () => {\r\n      setCurrentPostSettingButton(postId);\r\n      setShowPostSettingButton(true);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onClickCommentSettingButton = useCallback(\r\n    (commentId: number) => () => {\r\n      setCurrentCommentSettingButton(commentId);\r\n      setShowCommentSettingButton(true);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onTogglePostCommentForm = useCallback(\r\n    (postId: number) => () => {\r\n      setCurrentPostCommentForm(postId);\r\n      setOpenPostCommentForm(prev => !prev);\r\n    },\r\n    []\r\n  );\r\n\r\n  const onCloseSettingModal = useCallback(() => {\r\n    if (showPostSettingButton || showCommentSettingButton) {\r\n      setShowPostSettingButton(false);\r\n      setShowCommentSettingButton(false);\r\n    }\r\n  }, [showPostSettingButton, showCommentSettingButton]);\r\n\r\n  useEffect(() => {\r\n    if (updateCommentDone) {\r\n      setEditMode(false);\r\n    }\r\n  }, [updateCommentDone]);\r\n\r\n  useEffect(() => {\r\n    const postContainer = postContainerRef.current;\r\n    if (!postContainer) return;\r\n\r\n    function onScroll(e: any) {\r\n      if (communityUser && mainPosts.length) {\r\n        if (e.target.scrollTop >= e.target.scrollHeight - e.target.offsetHeight - 300) {\r\n          if (hasMorePost && !loadPostsLoading) {\r\n            const lastId = mainPosts[mainPosts.length - 1].id;\r\n            dispatch(\r\n              loadPostsRequestAction({ communityId: singleCommunity.id, postId: lastId })\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    postContainer.addEventListener('scroll', onScroll);\r\n\r\n    return () => postContainer.removeEventListener('scroll', onScroll);\r\n  }, [\r\n    communityUser,\r\n    mainPosts,\r\n    hasMorePost,\r\n    loadPostsLoading,\r\n    singleCommunity,\r\n    postContainerRef.current,\r\n  ]);\r\n\r\n  return (\r\n    <PostContainer onClick={onCloseSettingModal} ref={postContainerRef}>\r\n      {communityUser ? (\r\n        <>\r\n          <div className=\"post-form-container\">\r\n            <PostForm />\r\n          </div>\r\n          {mainPosts.length ? (\r\n            <>\r\n              {mainPosts.map(post => (\r\n                <div className=\"post-body-container\" key={post.id}>\r\n                  {editMode && post.id === currentModifyPost && (\r\n                    <PostEditModal\r\n                      setEditMode={setEditMode}\r\n                      setCurrentModifyPost={setCurrentModifyPost}\r\n                      currentPostText={post.content}\r\n                      postId={post.id}\r\n                      communityId={singleCommunity.id}\r\n                    />\r\n                  )}\r\n                  <div className=\"header post-body-header\">\r\n                    <div className=\"header-left\">\r\n                      <span>\r\n                        {post.User.profilePhoto ? (\r\n                          <img\r\n                            className=\"left-profile-image\"\r\n                            src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${post.User.profilePhoto}`}\r\n                            alt=\"profile image\"\r\n                          />\r\n                        ) : (\r\n                          <div className=\"left-fake-image\">{post.User.nickname[0]}</div>\r\n                        )}\r\n                      </span>\r\n                      <div className=\"left-nickname\">{post.User.nickname}</div>\r\n                    </div>\r\n                    <div className=\"header-right\">\r\n                      <div className=\"right-day\">\r\n                        {moment(post.createdAt).locale('ko').format('LLL')}\r\n                      </div>\r\n                      <div\r\n                        className=\"right-buttons\"\r\n                        onClick={onClickPostSettingButton(post.id)}\r\n                      >\r\n                        <MoreOutlined />\r\n                      </div>\r\n                      {showPostSettingButton && post.id === CurrentPostSettingButton && (\r\n                        <PostSettingModal\r\n                          setCurrentModifyPost={setCurrentModifyPost}\r\n                          setEditMode={setEditMode}\r\n                          postId={post.id}\r\n                          communityId={singleCommunity.id}\r\n                          postOwnerId={post.User.id}\r\n                          communityUserId={communityUser.id}\r\n                          content={post.content}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  {post.Images.length ? (\r\n                    <img\r\n                      src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${post.Images[0].src}`}\r\n                      alt=\"image\"\r\n                      className=\"post-image\"\r\n                    />\r\n                  ) : null}\r\n                  <div className=\"post-text\">{post.content}</div>\r\n                  <div className=\"post-comment-info\">\r\n                    <div\r\n                      onClick={onTogglePostCommentForm(post.id)}\r\n                      style={{\r\n                        cursor: 'pointer',\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: '4px' }}>\r\n                        <MessageOutlined />\r\n                      </span>\r\n                      {post.Comments.length\r\n                        ? `댓글 ${post.Comments.length}개 모두보기`\r\n                        : '댓글 작성하기'}\r\n                    </div>\r\n                    {openPostCommentForm && currentPostCommentForm === post.id && (\r\n                      <>\r\n                        {post.Comments &&\r\n                          post.Comments.map(comment => (\r\n                            <div className=\"post-comment-container\" key={comment.id}>\r\n                              {editMode && comment.id === currentModifyComment && (\r\n                                <CommentEditModal\r\n                                  setEditMode={setEditMode}\r\n                                  setCurrentModifyComment={setCurrentModifyComment}\r\n                                  currentCommentText={comment.content}\r\n                                  postId={post.id}\r\n                                  commentId={comment.id}\r\n                                />\r\n                              )}\r\n                              <div className=\"header comment-header\">\r\n                                <div className=\"header-left\">\r\n                                  <span>\r\n                                    {comment.User.profilePhoto ? (\r\n                                      <img\r\n                                        className=\"left-profile-image\"\r\n                                        src={`${process.env.NEXT_PUBLIC_BACK_URL_KEY}/${comment.User.profilePhoto}`}\r\n                                        alt=\"profile image\"\r\n                                      />\r\n                                    ) : (\r\n                                      <div className=\"left-fake-image\">\r\n                                        {comment.User.nickname[0]}\r\n                                      </div>\r\n                                    )}\r\n                                  </span>\r\n                                  <div className=\"left-nickname\">\r\n                                    {comment.User.nickname}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"header-right\">\r\n                                  <div className=\"right-day\">\r\n                                    {moment(comment.createdAt).locale('ko').format('LLL')}\r\n                                  </div>\r\n                                  <div\r\n                                    className=\"right-buttons\"\r\n                                    onClick={onClickCommentSettingButton(comment.id)}\r\n                                  >\r\n                                    <MoreOutlined />\r\n                                  </div>\r\n                                </div>\r\n                                {showCommentSettingButton &&\r\n                                  comment.id === currentCommentSettingButton && (\r\n                                    <CommentSettingModal\r\n                                      setCurrentModifyComment={setCurrentModifyComment}\r\n                                      setEditMode={setEditMode}\r\n                                      postId={post.id}\r\n                                      commentId={comment.id}\r\n                                      commentOwnerId={comment.User.id}\r\n                                      communityUserId={communityUser.id}\r\n                                      content={comment.content}\r\n                                    />\r\n                                  )}\r\n                              </div>\r\n                              <div className=\"comment-text\">{comment.content}</div>\r\n                            </div>\r\n                          ))}\r\n                        <div className=\"post-comment-form-container\">\r\n                          <CommentForm postId={post.id} />\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </>\r\n          ) : null}\r\n        </>\r\n      ) : (\r\n        <div className=\"visitor-post\">커뮤니티유저만 볼 수 있습니다</div>\r\n      )}\r\n    </PostContainer>\r\n  );\r\n}\r\n\r\nexport default memo(Post);\r\n"]},"metadata":{},"sourceType":"module"}