{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { CloseCircleOutlined } from '@ant-design/icons';\nimport { updatePostRequestAction } from 'actions/actionPost';\nimport useInput from 'hooks/useInput';\nimport React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer, ModalHeader, ModalBody } from './styles';\n\nfunction PostEditModal({\n  setEditMode,\n  setCurrentModifyPost,\n  currentPostText,\n  postId,\n  communityId\n}) {\n  const dispatch = useDispatch();\n  const [content, onChangeContent] = useInput(currentPostText || '');\n  const onClosePostEditModal = useCallback(() => {\n    setCurrentModifyPost(0);\n    setEditMode(false);\n  }, []);\n  const onClickModify = useCallback(() => {\n    if (confirm('게시글을 수정하시겠습니까?')) {\n      dispatch(updatePostRequestAction({\n        content,\n        postId,\n        communityId\n      }));\n      setEditMode(false);\n    }\n  }, [content]);\n  return /*#__PURE__*/_jsxs(ModalContainer, {\n    children: [/*#__PURE__*/_jsxs(ModalHeader, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"modal-title\",\n        children: \"\\uD3EC\\uC2A4\\uD2B8 \\uC218\\uC815\"\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"close-button\",\n        onClick: onClosePostEditModal,\n        children: /*#__PURE__*/_jsx(CloseCircleOutlined, {})\n      })]\n    }), /*#__PURE__*/_jsxs(ModalBody, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"textarea\", {\n          onChange: onChangeContent,\n          value: content\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"modify-button\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          onClick: onClickModify,\n          children: \"\\uC218\\uC815\\uD558\\uAE30\"\n        })\n      })]\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(PostEditModal);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/Modals/PostEditModal/index.tsx"],"names":["CloseCircleOutlined","updatePostRequestAction","useInput","React","memo","useCallback","useDispatch","ModalContainer","ModalHeader","ModalBody","PostEditModal","setEditMode","setCurrentModifyPost","currentPostText","postId","communityId","dispatch","content","onChangeContent","onClosePostEditModal","onClickModify","confirm"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,mBAApC;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,KAAP,IAA0BC,IAA1B,EAAgDC,WAAhD,QAAmE,OAAnE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,SAAtC,QAAuD,UAAvD;;AAUA,SAASC,aAAT,CAAuB;AACrBC,EAAAA,WADqB;AAErBC,EAAAA,oBAFqB;AAGrBC,EAAAA,eAHqB;AAIrBC,EAAAA,MAJqB;AAKrBC,EAAAA;AALqB,CAAvB,EAMuB;AACrB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAM,CAACW,OAAD,EAAUC,eAAV,IAA6BhB,QAAQ,CAASW,eAAe,IAAI,EAA5B,CAA3C;AAEA,QAAMM,oBAAoB,GAAGd,WAAW,CAAC,MAAM;AAC7CO,IAAAA,oBAAoB,CAAC,CAAD,CAApB;AACAD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHuC,EAGrC,EAHqC,CAAxC;AAKA,QAAMS,aAAa,GAAGf,WAAW,CAAC,MAAM;AACtC,QAAIgB,OAAO,CAAC,gBAAD,CAAX,EAA+B;AAC7BL,MAAAA,QAAQ,CAACf,uBAAuB,CAAC;AAAEgB,QAAAA,OAAF;AAAWH,QAAAA,MAAX;AAAmBC,QAAAA;AAAnB,OAAD,CAAxB,CAAR;AACAJ,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GALgC,EAK9B,CAACM,OAAD,CAL8B,CAAjC;AAOA,sBACE,MAAC,cAAD;AAAA,4BACE,MAAC,WAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA,QADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,OAAO,EAAEE,oBAAvC;AAAA,+BACE,KAAC,mBAAD;AADF,QAFF;AAAA,MADF,eAOE,MAAC,SAAD;AAAA,8BACE;AAAA,+BACE;AAAU,UAAA,QAAQ,EAAED,eAApB;AAAqC,UAAA,KAAK,EAAED;AAA5C;AADF,QADF,eAIE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEG,aAAjB;AAAA;AAAA;AADF,QAJF;AAAA,MAPF;AAAA,IADF;AAkBD;;AAED,4BAAehB,IAAI,CAACM,aAAD,CAAnB","sourcesContent":["import { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { updatePostRequestAction } from 'actions/actionPost';\r\nimport useInput from 'hooks/useInput';\r\nimport React, { Dispatch, memo, SetStateAction, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ModalContainer, ModalHeader, ModalBody } from './styles';\r\n\r\ninterface PostEditModalProps {\r\n  setEditMode: Dispatch<SetStateAction<boolean>>;\r\n  setCurrentModifyPost: Dispatch<SetStateAction<number>>;\r\n  currentPostText: string;\r\n  postId: number;\r\n  communityId: number;\r\n}\r\n\r\nfunction PostEditModal({\r\n  setEditMode,\r\n  setCurrentModifyPost,\r\n  currentPostText,\r\n  postId,\r\n  communityId,\r\n}: PostEditModalProps) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [content, onChangeContent] = useInput<string>(currentPostText || '');\r\n\r\n  const onClosePostEditModal = useCallback(() => {\r\n    setCurrentModifyPost(0);\r\n    setEditMode(false);\r\n  }, []);\r\n\r\n  const onClickModify = useCallback(() => {\r\n    if (confirm('게시글을 수정하시겠습니까?')) {\r\n      dispatch(updatePostRequestAction({ content, postId, communityId }));\r\n      setEditMode(false);\r\n    }\r\n  }, [content]);\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ModalHeader>\r\n        <div className=\"modal-title\">포스트 수정</div>\r\n        <div className=\"close-button\" onClick={onClosePostEditModal}>\r\n          <CloseCircleOutlined />\r\n        </div>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <div>\r\n          <textarea onChange={onChangeContent} value={content} />\r\n        </div>\r\n        <div className=\"modify-button\">\r\n          <button onClick={onClickModify}>수정하기</button>\r\n        </div>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  );\r\n}\r\n\r\nexport default memo(PostEditModal);\r\n"]},"metadata":{},"sourceType":"module"}