{"version":3,"sources":["webpack://_N_E/./node_modules/@ant-design/icons-svg/es/asn/CloseCircleOutlined.js","webpack://_N_E/./node_modules/@ant-design/icons/es/icons/CloseCircleOutlined.js","webpack://_N_E/./components/Modals/ModifyMeetModal/styles.tsx","webpack://_N_E/./components/Modals/ModifyMeetModal/index.tsx","webpack://_N_E/./utils/day.ts","webpack://_N_E/./utils/stylesUtil.tsx","webpack://_N_E/./utils/yup.ts"],"names":["props","ref","AntdIcon","Object","assign","icon","displayName","ModalContainer","styled","ModalHeader","ColorAni","ModalBody","InputContainer","SearchAddressModal","dynamic","FormErrorMessage","setShowModifyMeetModal","communityId","meetInfo","dispatch","useDispatch","useState","place","setPlace","placeError","setPlaceError","showSearchAddressModal","setShowSearchAddressModal","useForm","resolver","yupResolver","createMeetValidation","mode","handleSubmit","errors","control","closeModifyMeetModal","useCallback","openSearchAddressModal","closeSearchAddressModal","onSubmit","data","d","Date","date","moment","locale","format","modifyMeetRequestAction","meetId","id","fee","members","title","className","onClick","CloseCircleOutlined","onFinish","htmlFor","as","type","name","placeholder","defaultValue","maxLength","message","errorMessage","style","display","gridTemplateColumns","min","Users","length","fromMomentToDate","cursor","value","readOnly","ghost","htmlType","setCountry","day","getFullYear","getMonth","getDate","getHours","getMinutes","momentDate","split","year","slice","month","d2","hour","apHour","minute","keyframes","signUpValidation","yup","email","required","nickname","max","password","passwordCheck","oneOf","term","addCommunityValidation","communityName","description"],"mappings":"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","file":"static/chunks/5721.60ba25577a1d99815aec.js","sourcesContent":["// This icon file is generated automatically.\nvar CloseCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"close-circle\", \"theme\": \"outlined\" };\nexport default CloseCircleOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CloseCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/CloseCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar CloseCircleOutlined = function CloseCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: CloseCircleOutlinedSvg\n  }));\n};\n\nCloseCircleOutlined.displayName = 'CloseCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(CloseCircleOutlined);","import styled from 'styled-components';\r\nimport { ColorAni } from 'utils/stylesUtil';\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 100;\r\n  width: 500px;\r\n  height: 500px;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.6);\r\n  backdrop-filter: saturate(180%) blur(12px);\r\n  -webkit-backdrop-filter: saturate(180%) blur(12px);\r\n\r\n  display: grid;\r\n  grid-template-rows: 44px auto;\r\n\r\n  label {\r\n    color: #e4e4e4;\r\n  }\r\n`;\r\n\r\nexport const ModalHeader = styled.header`\r\n  display: flex;\r\n  color: #e4e4e4;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n\r\n  .modal-title {\r\n    margin-left: 1rem;\r\n  }\r\n  .close-button {\r\n    margin-right: 1rem;\r\n    cursor: pointer;\r\n\r\n    :hover {\r\n      color: coral;\r\n      animation: ${ColorAni} 0.5s linear infinite;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ModalBody = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  .form {\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr 1fr 44px;\r\n  }\r\n\r\n  .create-button {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  padding: 0.5rem;\r\n  margin-bottom: 1rem;\r\n  input {\r\n    width: 100%;\r\n    height: 44px;\r\n    border: none;\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.4);\r\n    background: transparent;\r\n    color: #fff;\r\n  }\r\n`;\r\n","import { CloseCircleOutlined } from '@ant-design/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { Button, Form } from 'antd';\r\nimport React, { Dispatch, SetStateAction, useCallback, useState } from 'react';\r\nimport dynamic from 'next/dynamic';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { createMeetValidation } from 'utils/yup';\r\nimport { ModalContainer, ModalHeader, ModalBody, InputContainer } from './styles';\r\nimport { fromMomentToDate } from 'utils/day';\r\nimport moment from 'moment';\r\nimport { useDispatch } from 'react-redux';\r\nimport { IMeet } from 'interfaces/db';\r\nimport { modifyMeetRequestAction } from 'actions/actionCommunity';\r\n\r\nconst SearchAddressModal = dynamic(() => import('components/Modals/SearchAddressModal'));\r\nconst FormErrorMessage = dynamic(() => import('components/Message/FormErrorMessage'));\r\n\r\ntype CreateMeetType = {\r\n  title: string;\r\n  fee: number;\r\n  members: number;\r\n  date: Date;\r\n};\r\n\r\ninterface ModifyMeetModalProps {\r\n  setShowModifyMeetModal: Dispatch<SetStateAction<boolean>>;\r\n  communityId: number;\r\n  meetInfo: IMeet | undefined;\r\n}\r\n\r\nfunction ModifyMeetModal({\r\n  setShowModifyMeetModal,\r\n  communityId,\r\n  meetInfo,\r\n}: ModifyMeetModalProps) {\r\n  const dispatch = useDispatch();\r\n  const [place, setPlace] = useState(meetInfo?.place as string);\r\n  const [placeError, setPlaceError] = useState(false);\r\n  const [showSearchAddressModal, setShowSearchAddressModal] = useState(false);\r\n  const { handleSubmit, errors, control } = useForm<CreateMeetType>({\r\n    resolver: yupResolver(createMeetValidation),\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const closeModifyMeetModal = useCallback(() => {\r\n    setShowModifyMeetModal(false);\r\n  }, []);\r\n\r\n  const openSearchAddressModal = useCallback(() => {\r\n    setPlaceError(false);\r\n    setShowSearchAddressModal(true);\r\n  }, []);\r\n\r\n  const closeSearchAddressModal = useCallback(() => {\r\n    setShowSearchAddressModal(false);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    handleSubmit((data: CreateMeetType) => {\r\n      if (place === '') {\r\n        return setPlaceError(true);\r\n      }\r\n      const d = new Date(data.date);\r\n      const date = moment(d).locale('ko').format('LLL');\r\n      dispatch(\r\n        modifyMeetRequestAction({\r\n          communityId,\r\n          meetId: meetInfo?.id as number,\r\n          fee: data.fee,\r\n          date,\r\n          members: data.members,\r\n          title: data.title,\r\n          place,\r\n        })\r\n      );\r\n      setShowSearchAddressModal(false);\r\n    }),\r\n    [place, communityId, meetInfo]\r\n  );\r\n\r\n  if (!meetInfo) {\r\n    return <div>잠시만 기다려주세요</div>;\r\n  }\r\n\r\n  return (\r\n    <ModalContainer>\r\n      <ModalHeader>\r\n        <div className=\"modal-title\">모임수정하기</div>\r\n        <div className=\"close-button\" onClick={closeModifyMeetModal}>\r\n          <CloseCircleOutlined />\r\n        </div>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Form onFinish={onSubmit} className=\"form\">\r\n          <InputContainer>\r\n            <label htmlFor=\"title\">모임명</label>\r\n            <br />\r\n            <Controller\r\n              as={<input />}\r\n              type=\"text\"\r\n              name=\"title\"\r\n              control={control}\r\n              placeholder=\"모임 이름을 입력하세요\"\r\n              defaultValue={meetInfo.title}\r\n              maxLength=\"15\"\r\n            />\r\n            {errors.title?.message && (\r\n              <FormErrorMessage errorMessage={errors.title.message} />\r\n            )}\r\n          </InputContainer>\r\n\r\n          <div style={{ display: 'grid', gridTemplateColumns: '50% 50%' }}>\r\n            <InputContainer>\r\n              <label htmlFor=\"fee\">참가비</label>\r\n              <br />\r\n              <Controller\r\n                as={<input />}\r\n                type=\"number\"\r\n                name=\"fee\"\r\n                control={control}\r\n                defaultValue={meetInfo.fee}\r\n              />\r\n              {errors.fee?.message && (\r\n                <FormErrorMessage errorMessage={errors.fee.message} />\r\n              )}\r\n            </InputContainer>\r\n\r\n            <InputContainer>\r\n              <label htmlFor=\"members\">멤버수</label>\r\n              <br />\r\n              <Controller\r\n                as={<input />}\r\n                type=\"number\"\r\n                name=\"members\"\r\n                min={meetInfo.Users.length}\r\n                defaultValue={meetInfo.members}\r\n                control={control}\r\n              />\r\n              {errors.members?.message && (\r\n                <FormErrorMessage errorMessage={errors.members.message} />\r\n              )}\r\n            </InputContainer>\r\n          </div>\r\n\r\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\r\n            <InputContainer>\r\n              <label htmlFor=\"date\">모임날짜</label>\r\n              <br />\r\n              <Controller\r\n                as={<input />}\r\n                type=\"datetime-local\"\r\n                name=\"date\"\r\n                control={control}\r\n                defaultValue={fromMomentToDate(meetInfo.date)}\r\n                style={{ cursor: 'pointer' }}\r\n              />\r\n              {errors.date?.message && (\r\n                <FormErrorMessage errorMessage={errors.date.message} />\r\n              )}\r\n            </InputContainer>\r\n\r\n            <InputContainer>\r\n              <label htmlFor=\"country\">모임장소</label>\r\n              <br />\r\n              <input\r\n                style={{ cursor: 'pointer' }}\r\n                value={place}\r\n                readOnly\r\n                placeholder=\"도로명 주소를 입력하세요\"\r\n                onClick={openSearchAddressModal}\r\n              />\r\n              {placeError && <FormErrorMessage errorMessage=\"주소를 입력하세요\" />}\r\n            </InputContainer>\r\n          </div>\r\n\r\n          <div className=\"create-button\">\r\n            <Button ghost htmlType=\"submit\">\r\n              만들기\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </ModalBody>\r\n      {showSearchAddressModal && (\r\n        <SearchAddressModal\r\n          closeSearchAddressModal={closeSearchAddressModal}\r\n          setCountry={setPlace}\r\n          type=\"road\"\r\n        />\r\n      )}\r\n    </ModalContainer>\r\n  );\r\n}\r\n\r\nexport default ModifyMeetModal;\r\n","export function day() {\r\n  const date = new Date();\r\n  const today = `${date.getFullYear()}-${\r\n    date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n  }-${date.getDate()}T${date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()}:${\r\n    date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n  }`;\r\n\r\n  return today;\r\n}\r\n\r\nexport function fromMomentToDate(momentDate: string) {\r\n  const d = momentDate.split(' ');\r\n  const year = d[0].slice(0, 4);\r\n  const month = d[1].length === 2 ? `0${d[1][0]}` : d[1].slice(0, 2);\r\n  const date = d[2].length === 2 ? `0${d[2][0]}` : d[2].slice(0, 2);\r\n  const d2 = d[4].split(':');\r\n  const hour = d2[0].length === 1 ? `0${d2[0]}` : d2[0];\r\n  const apHour = d[3] === '오후' ? +hour + 12 : hour;\r\n  const minute = d2[1].length === 1 ? `0${d2[1][0]}` : d2[1];\r\n  return `${year}-${month}-${date}T${apHour}:${minute}`;\r\n}\r\n","import { keyframes } from 'styled-components';\r\n\r\nexport const ColorAni = keyframes`\r\n  from {\r\n    filter: hue-rotate(0deg);\r\n  }\r\n  to {\r\n    filter: hue-rotate(360deg);\r\n  }\r\n`;\r\n","import * as yup from 'yup';\r\n\r\nexport const signUpValidation = yup.object({\r\n  email: yup.string().required('아이디를 입력하세요'),\r\n  nickname: yup\r\n    .string()\r\n    .required('닉네임을 입력하세요')\r\n    .max(10, '닉네임은 10글자 이하여야 합니다'),\r\n  password: yup\r\n    .string()\r\n    .required('비밀번호를 입력하세요')\r\n    .max(20, '비밀번호는 20자리 이하여야 합니다')\r\n    .min(8, '비밀번호는 8자리 이상이어야 합니다'),\r\n  passwordCheck: yup\r\n    .string()\r\n    .oneOf([yup.ref('password'), null], '비밀번호가 일치하지 않습니다'),\r\n  term: yup.boolean().oneOf([true], '약관에 동의해주세요'),\r\n});\r\n\r\nexport const addCommunityValidation = yup.object({\r\n  communityName: yup\r\n    .string()\r\n    .required('커뮤니티이름을 입력하세요')\r\n    .max(10, '커뮤니티 이름은 10글자 이하여야 합니다'),\r\n  description: yup\r\n    .string()\r\n    .required('커뮤니티를 소개하세요')\r\n    .max(140, '최대 140글자까지 입력가능합니다'),\r\n});\r\n\r\nexport const createMeetValidation = yup.object({\r\n  title: yup\r\n    .string()\r\n    .required('모임 이름을 입력하세요')\r\n    .max(15, '최대 15자리까지 가능합니다'),\r\n  fee: yup.number().min(0).required('참가비를 입력하세요(없으면 0)'),\r\n  members: yup\r\n    .number()\r\n    .min(1, '최소 1명이상이여야 합니다')\r\n    .required('인원 수를 입력하세요'),\r\n  date: yup.date().required('날짜를 입력하세요'),\r\n});\r\n"],"sourceRoot":""}