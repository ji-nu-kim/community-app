{"version":3,"sources":["webpack://front/./components/CommentForm.tsx","webpack://front/./hooks/useInput.tsx"],"names":["CommentForm","postId","dispatch","useDispatch","me","useSelector","state","user","addCommentDone","post","comment","onChangeComment","setComment","useInput","useEffect","onSubmitComment","useCallback","trim","alert","addCommentRequestAction","marginTop","background","border","color","resize","height","memo","initialValue","value","setValue","useState","handler","e","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;;AAMA,SAASA,WAAT,CAAqB;AAAEC;AAAF,CAArB,EAAmD;AACjD,QAAMC,QAAQ,GAAGC,wDAAW,EAA5B;AACA,QAAM;AAAEC;AAAF,MAASC,wDAAW,CAAEC,KAAD,IAA+BA,KAAK,CAACC,IAAtC,CAA1B;AACA,QAAM;AAAEC;AAAF,MAAqBH,wDAAW,CAAEC,KAAD,IAA+BA,KAAK,CAACG,IAAtC,CAAtC;AACA,QAAM,CAACC,OAAD,EAAUC,eAAV,EAA2BC,UAA3B,IAAyCC,iEAAQ,CAAS,EAAT,CAAvD;AAEAC,kDAAS,CAAC,MAAM;AACd,QAAIN,cAAJ,EAAoB;AAClBI,gBAAU,CAAC,EAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,QAAMO,eAAe,GAAGC,kDAAW,CAAC,MAAM;AACxC,QAAI,CAACN,OAAO,CAACO,IAAR,EAAD,IAAmB,CAACP,OAAxB,EAAiC;AAC/BQ,WAAK,CAAC,WAAD,CAAL;AACA;AACD;;AAED,QAAId,EAAJ,EAAQ;AACN,aAAOF,QAAQ,CACbiB,sFAAuB,CAAC;AACtBT,eADsB;AAEtBT;AAFsB,OAAD,CADV,CAAf;AAMD;AACF,GAdkC,EAchC,CAACS,OAAD,EAAUT,MAAV,EAAkBG,EAAlB,CAdgC,CAAnC;AAgBA,sBACE,mDAAC,sCAAD;AAAM,YAAQ,EAAEW,eAAhB;AAAA,2BACE,wDAAC,2CAAD;AACE,WAAK,EAAE;AACLK,iBAAS,EAAE;AADN,OADT;AAAA,8BAKE,mDAAC,gDAAD;AACE,aAAK,EAAEV,OADT;AAEE,gBAAQ,EAAEC,eAFZ;AAGE,YAAI,EAAE,CAHR;AAIE,mBAAW,EAAC,mDAJd;AAKE,aAAK,EAAE;AACLU,oBAAU,EAAE,mBADP;AAELC,gBAAM,EAAE,MAFH;AAGLC,eAAK,EAAE,MAHF;AAILC,gBAAM,EAAE,MAJH;AAKLC,gBAAM,EAAE;AALH;AALT,QALF,eAkBE,mDAAC,wCAAD;AAAQ,YAAI,EAAC,SAAb;AAAuB,gBAAQ,EAAC,QAAhC;AAAyC,aAAK,EAAE;AAAEL,mBAAS,EAAE;AAAb,SAAhD;AAAA;AAAA,QAlBF;AAAA;AADF,IADF;AA0BD;;AAED,4EAAeM,2CAAI,CAAC1B,WAAD,CAAnB,E;;;;;;;;;;ACnEA;;AAEA,SAASa,QAAT,CAAqBc,YAArB,EAA6E;AAC3E,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBC,+CAAQ,CAACH,YAAD,CAAlC;AAEA,QAAMI,OAAO,GAAGf,kDAAW,CAACgB,CAAC,IAAI;AAC/BH,YAAQ,CAACG,CAAC,CAACC,MAAF,CAASL,KAAV,CAAR;AACD,GAF0B,EAExB,EAFwB,CAA3B;AAIA,SAAO,CAACA,KAAD,EAAQG,OAAR,EAAiBF,QAAjB,CAAP;AACD;;AAED,yDAAehB,QAAf,E","file":"1469.js","sourcesContent":["import { Form, Input, Button } from 'antd';\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { addCommentRequestAction } from '../actions/actionPost';\nimport useInput from '../hooks/useInput';\nimport { RootStateInterface } from '../interfaces/RootState';\nimport { useDispatch, useSelector } from 'react-redux';\n\ninterface CommentFormProps {\n  postId: number;\n}\n\nfunction CommentForm({ postId }: CommentFormProps) {\n  const dispatch = useDispatch();\n  const { me } = useSelector((state: RootStateInterface) => state.user);\n  const { addCommentDone } = useSelector((state: RootStateInterface) => state.post);\n  const [comment, onChangeComment, setComment] = useInput<string>('');\n\n  useEffect(() => {\n    if (addCommentDone) {\n      setComment('');\n    }\n  }, [addCommentDone]);\n\n  const onSubmitComment = useCallback(() => {\n    if (!comment.trim() || !comment) {\n      alert('댓글을 입력하세요');\n      return;\n    }\n\n    if (me) {\n      return dispatch(\n        addCommentRequestAction({\n          comment,\n          postId,\n        })\n      );\n    }\n  }, [comment, postId, me]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item\n        style={{\n          marginTop: '0.5rem',\n        }}\n      >\n        <Input.TextArea\n          value={comment}\n          onChange={onChangeComment}\n          rows={4}\n          placeholder=\"댓글을 작성하세요\"\n          style={{\n            background: 'rgba(0, 0, 0, .4)',\n            border: 'none',\n            color: '#fff',\n            resize: 'none',\n            height: '70px',\n          }}\n        />\n        <Button type=\"primary\" htmlType=\"submit\" style={{ marginTop: '.5rem' }}>\n          등록\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default memo(CommentForm);\n","import { useState, useCallback, Dispatch, SetStateAction } from 'react';\n\nfunction useInput<T>(initialValue: T): [T, any, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState(initialValue);\n\n  const handler = useCallback(e => {\n    setValue(e.target.value);\n  }, []);\n\n  return [value, handler, setValue];\n}\n\nexport default useInput;\n"],"sourceRoot":""}