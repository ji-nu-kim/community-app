{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { END } from '@redux-saga/core';\nimport { loadCommunityRequestAction } from 'actions/actionCommunity';\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\nimport { loadPostsRequestAction } from 'actions/actionPost';\nimport axios from 'axios';\nimport AppLayout from 'components/Layouts/AppLayout';\nimport CommunityBody from 'components/CommunityBody';\nimport CommunityHeader from 'components/CommunityHeader';\nimport Router from 'next/router';\nimport React, { memo, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport wrapper from 'store/configureStore';\nimport styled from 'styled-components';\nimport Head from 'next/head';\nconst CommunityContainer = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"id__CommunityContainer\",\n  componentId: \"sc-18byfn5-0\"\n})([\"width:100%;height:100%;background:linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,0.4)),url(\", \");background-position:center;background-size:cover;\"], props => props.backgroundImage && props.backgroundImage);\n\nfunction Community() {\n  const {\n    singleCommunity,\n    loadCommunityError\n  } = useSelector(state => state.community);\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    reportDone\n  } = useSelector(state => state.post);\n  const communityUser = singleCommunity === null || singleCommunity === void 0 ? void 0 : singleCommunity.Users.find(user => user.id === (me === null || me === void 0 ? void 0 : me.id));\n  useEffect(() => {\n    if (loadCommunityError) {\n      Router.push('/');\n    }\n  }, [loadCommunityError]);\n  useEffect(() => {\n    if (reportDone) {\n      alert('신고를 완료했습니다');\n    }\n  }, [reportDone]);\n\n  if (!singleCommunity) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"\\uC7A0\\uC2DC \\uAE30\\uB2E4\\uB824\\uC8FC\\uC138\\uC694\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsxs(\"title\", {\n        children: [\"community - \", singleCommunity.communityName]\n      })\n    }), /*#__PURE__*/_jsx(AppLayout, {\n      children: /*#__PURE__*/_jsxs(CommunityContainer, {\n        backgroundImage: singleCommunity.profilePhoto ? singleCommunity.profilePhoto.replace(/\\/resize\\//, '/original/') : null,\n        children: [/*#__PURE__*/_jsx(CommunityHeader, {\n          singleCommunity: singleCommunity,\n          me: me,\n          communityUser: communityUser\n        }), /*#__PURE__*/_jsx(CommunityBody, {\n          singleCommunity: singleCommunity,\n          me: me,\n          communityUser: communityUser\n        })]\n      })\n    })]\n  });\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  const communityId = Number(context.query.id);\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch(loadMyInfoRequestAction());\n  context.store.dispatch(loadCommunityRequestAction({\n    communityId: communityId\n  }));\n  context.store.dispatch(loadPostsRequestAction({\n    communityId: communityId,\n    postId: 0\n  }));\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default /*#__PURE__*/memo(Community);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/frontend/react/next/community/front/pages/community/[id].tsx"],"names":["END","loadCommunityRequestAction","loadMyInfoRequestAction","loadPostsRequestAction","axios","AppLayout","CommunityBody","CommunityHeader","Router","React","memo","useEffect","useSelector","wrapper","styled","Head","CommunityContainer","div","props","backgroundImage","Community","singleCommunity","loadCommunityError","state","community","me","user","reportDone","post","communityUser","Users","find","id","push","alert","communityName","profilePhoto","replace","getServerSideProps","context","cookie","req","headers","communityId","Number","query","defaults","Cookie","store","dispatch","postId","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import { END } from '@redux-saga/core';\nimport { loadCommunityRequestAction } from 'actions/actionCommunity';\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\nimport { loadPostsRequestAction } from 'actions/actionPost';\nimport axios from 'axios';\nimport AppLayout from 'components/Layouts/AppLayout';\nimport CommunityBody from 'components/CommunityBody';\nimport CommunityHeader from 'components/CommunityHeader';\nimport { RootStateInterface } from 'interfaces/RootState';\nimport { GetServerSideProps } from 'next';\nimport Router from 'next/router';\nimport React, { memo, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport wrapper from 'store/configureStore';\nimport styled from 'styled-components';\nimport Head from 'next/head';\n\ninterface IBackgroundImage {\n  backgroundImage: string | null;\n}\n\nconst CommunityContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.4)),\n    url(${(props: IBackgroundImage) => props.backgroundImage && props.backgroundImage});\n  background-position: center;\n  background-size: cover;\n`;\n\nfunction Community() {\n  const { singleCommunity, loadCommunityError } = useSelector(\n    (state: RootStateInterface) => state.community\n  );\n  const { me } = useSelector((state: RootStateInterface) => state.user);\n  const { reportDone } = useSelector((state: RootStateInterface) => state.post);\n  const communityUser = singleCommunity?.Users.find(user => user.id === me?.id);\n\n  useEffect(() => {\n    if (loadCommunityError) {\n      Router.push('/');\n    }\n  }, [loadCommunityError]);\n\n  useEffect(() => {\n    if (reportDone) {\n      alert('신고를 완료했습니다');\n    }\n  }, [reportDone]);\n\n  if (!singleCommunity) {\n    return <div>잠시 기다려주세요</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>community - {singleCommunity.communityName}</title>\n      </Head>\n      <AppLayout>\n        <CommunityContainer\n          backgroundImage={\n            singleCommunity.profilePhoto\n              ? singleCommunity.profilePhoto.replace(/\\/resize\\//, '/original/')\n              : null\n          }\n        >\n          <CommunityHeader\n            singleCommunity={singleCommunity}\n            me={me}\n            communityUser={communityUser}\n          />\n          <CommunityBody\n            singleCommunity={singleCommunity}\n            me={me}\n            communityUser={communityUser}\n          />\n        </CommunityContainer>\n      </AppLayout>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(\n  async context => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    const communityId = Number(context.query.id);\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(loadMyInfoRequestAction());\n    context.store.dispatch(loadCommunityRequestAction({ communityId: communityId }));\n    context.store.dispatch(\n      loadPostsRequestAction({ communityId: communityId, postId: 0 })\n    );\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default memo(Community);\n"]},"metadata":{},"sourceType":"module"}