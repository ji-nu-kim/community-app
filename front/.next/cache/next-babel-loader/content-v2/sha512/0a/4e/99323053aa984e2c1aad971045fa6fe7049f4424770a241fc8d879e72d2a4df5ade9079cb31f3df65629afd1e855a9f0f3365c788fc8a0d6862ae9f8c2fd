{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { removePostRequestAction, reportRequestAction } from 'actions/actionPost';\nimport React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer } from './styles';\n\nfunction PostSettingModal({\n  setCurrentModifyPost,\n  setEditMode,\n  postId,\n  communityId,\n  postOwnerId,\n  communityUserId,\n  content\n}) {\n  const dispatch = useDispatch();\n  const postOwner = postOwnerId === communityUserId;\n  const onClickModifyButton = useCallback(() => {\n    setCurrentModifyPost(postId);\n    setEditMode(prev => !prev);\n  }, [postId]);\n  const onClickDeleteButton = useCallback(() => {\n    if (confirm('게시글을 지우시겠습니까?')) {\n      return dispatch(removePostRequestAction({\n        postId,\n        communityId\n      }));\n    }\n  }, []);\n  const onClickReportButton = useCallback(() => {\n    const reason = prompt('신고하는 이유를 적어주세요');\n\n    if (reason && communityUserId) {\n      dispatch(reportRequestAction({\n        contentId: postId,\n        reporter: communityUserId,\n        reportedPerson: postOwnerId,\n        reason,\n        variety: 'post',\n        content\n      }));\n    }\n  }, [postOwnerId, communityUserId, postId, content]);\n  return /*#__PURE__*/_jsx(ModalContainer, {\n    children: /*#__PURE__*/_jsx(\"ul\", {\n      children: postOwner ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"li\", {\n          onClick: onClickModifyButton,\n          children: \"\\uC218\\uC815\"\n        }), /*#__PURE__*/_jsx(\"li\", {\n          onClick: onClickDeleteButton,\n          children: \"\\uC0AD\\uC81C\"\n        })]\n      }) : /*#__PURE__*/_jsx(\"li\", {\n        onClick: onClickReportButton,\n        children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n      })\n    })\n  });\n}\n\nexport default PostSettingModal;","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/Modals/PostSettingModal/index.tsx"],"names":["removePostRequestAction","reportRequestAction","React","useCallback","useDispatch","ModalContainer","PostSettingModal","setCurrentModifyPost","setEditMode","postId","communityId","postOwnerId","communityUserId","content","dispatch","postOwner","onClickModifyButton","prev","onClickDeleteButton","confirm","onClickReportButton","reason","prompt","contentId","reporter","reportedPerson","variety"],"mappings":";;;AAAA,SAASA,uBAAT,EAAkCC,mBAAlC,QAA6D,oBAA7D;AACA,OAAOC,KAAP,IAA0CC,WAA1C,QAA6D,OAA7D;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;;AAYA,SAASC,gBAAT,CAA0B;AACxBC,EAAAA,oBADwB;AAExBC,EAAAA,WAFwB;AAGxBC,EAAAA,MAHwB;AAIxBC,EAAAA,WAJwB;AAKxBC,EAAAA,WALwB;AAMxBC,EAAAA,eANwB;AAOxBC,EAAAA;AAPwB,CAA1B,EAQ0B;AACxB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,SAAS,GAAGJ,WAAW,KAAKC,eAAlC;AAEA,QAAMI,mBAAmB,GAAGb,WAAW,CAAC,MAAM;AAC5CI,IAAAA,oBAAoB,CAACE,MAAD,CAApB;AACAD,IAAAA,WAAW,CAACS,IAAI,IAAI,CAACA,IAAV,CAAX;AACD,GAHsC,EAGpC,CAACR,MAAD,CAHoC,CAAvC;AAKA,QAAMS,mBAAmB,GAAGf,WAAW,CAAC,MAAM;AAC5C,QAAIgB,OAAO,CAAC,eAAD,CAAX,EAA8B;AAC5B,aAAOL,QAAQ,CAACd,uBAAuB,CAAC;AAAES,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAD,CAAxB,CAAf;AACD;AACF,GAJsC,EAIpC,EAJoC,CAAvC;AAMA,QAAMU,mBAAmB,GAAGjB,WAAW,CAAC,MAAM;AAC5C,UAAMkB,MAAM,GAAGC,MAAM,CAAC,gBAAD,CAArB;;AAEA,QAAID,MAAM,IAAIT,eAAd,EAA+B;AAC7BE,MAAAA,QAAQ,CACNb,mBAAmB,CAAC;AAClBsB,QAAAA,SAAS,EAAEd,MADO;AAElBe,QAAAA,QAAQ,EAAEZ,eAFQ;AAGlBa,QAAAA,cAAc,EAAEd,WAHE;AAIlBU,QAAAA,MAJkB;AAKlBK,QAAAA,OAAO,EAAE,MALS;AAMlBb,QAAAA;AANkB,OAAD,CADb,CAAR;AAUD;AACF,GAfsC,EAepC,CAACF,WAAD,EAAcC,eAAd,EAA+BH,MAA/B,EAAuCI,OAAvC,CAfoC,CAAvC;AAiBA,sBACE,KAAC,cAAD;AAAA,2BACE;AAAA,gBACGE,SAAS,gBACR;AAAA,gCACE;AAAI,UAAA,OAAO,EAAEC,mBAAb;AAAA;AAAA,UADF,eAEE;AAAI,UAAA,OAAO,EAAEE,mBAAb;AAAA;AAAA,UAFF;AAAA,QADQ,gBAMR;AAAI,QAAA,OAAO,EAAEE,mBAAb;AAAA;AAAA;AAPJ;AADF,IADF;AAcD;;AAED,eAAed,gBAAf","sourcesContent":["import { removePostRequestAction, reportRequestAction } from 'actions/actionPost';\nimport React, { Dispatch, SetStateAction, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer } from './styles';\n\ninterface PostSettingModalProps {\n  setCurrentModifyPost: Dispatch<SetStateAction<number>>;\n  setEditMode: Dispatch<SetStateAction<boolean>>;\n  postId: number;\n  communityId: number;\n  postOwnerId: number;\n  communityUserId: number;\n  content: string;\n}\n\nfunction PostSettingModal({\n  setCurrentModifyPost,\n  setEditMode,\n  postId,\n  communityId,\n  postOwnerId,\n  communityUserId,\n  content,\n}: PostSettingModalProps) {\n  const dispatch = useDispatch();\n  const postOwner = postOwnerId === communityUserId;\n\n  const onClickModifyButton = useCallback(() => {\n    setCurrentModifyPost(postId);\n    setEditMode(prev => !prev);\n  }, [postId]);\n\n  const onClickDeleteButton = useCallback(() => {\n    if (confirm('게시글을 지우시겠습니까?')) {\n      return dispatch(removePostRequestAction({ postId, communityId }));\n    }\n  }, []);\n\n  const onClickReportButton = useCallback(() => {\n    const reason = prompt('신고하는 이유를 적어주세요');\n\n    if (reason && communityUserId) {\n      dispatch(\n        reportRequestAction({\n          contentId: postId,\n          reporter: communityUserId,\n          reportedPerson: postOwnerId,\n          reason,\n          variety: 'post',\n          content,\n        })\n      );\n    }\n  }, [postOwnerId, communityUserId, postId, content]);\n\n  return (\n    <ModalContainer>\n      <ul>\n        {postOwner ? (\n          <>\n            <li onClick={onClickModifyButton}>수정</li>\n            <li onClick={onClickDeleteButton}>삭제</li>\n          </>\n        ) : (\n          <li onClick={onClickReportButton}>신고하기</li>\n        )}\n      </ul>\n    </ModalContainer>\n  );\n}\n\nexport default PostSettingModal;\n"]},"metadata":{},"sourceType":"module"}