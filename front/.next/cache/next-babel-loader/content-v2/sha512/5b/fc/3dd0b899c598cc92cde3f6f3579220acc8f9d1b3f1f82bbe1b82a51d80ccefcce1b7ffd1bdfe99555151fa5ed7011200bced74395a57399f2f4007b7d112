{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { searchCommunitiesRequestAction } from 'actions/actionCommunity';\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\nimport axios from 'axios';\nimport AppLayout from 'components/Layouts/AppLayout';\nimport CategoryLayout, { CategoryContent, CategoryHeader } from 'components/Layouts/CategoryLayout';\nimport React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport wrapper from 'store/configureStore';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport BoxStyleCard from 'components/Cards/BoxStyleCard';\n\nfunction keyword() {\n  const router = useRouter();\n  const {\n    changableCommunities\n  } = useSelector(state => state.community);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsxs(\"title\", {\n        children: [\"community - \", router.query.keyword, \" \\uAC80\\uC0C9\"]\n      })\n    }), /*#__PURE__*/_jsx(AppLayout, {\n      children: /*#__PURE__*/_jsxs(CategoryLayout, {\n        children: [/*#__PURE__*/_jsx(CategoryHeader, {\n          children: /*#__PURE__*/_jsxs(\"h1\", {\n            children: [\"\\u201C\", router.query.keyword, \"\\u201D\\uC640\", /*#__PURE__*/_jsx(\"br\", {}), \"\\uC5F0\\uAD00\\uC788\\uB294 \\uCEE4\\uBBA4\\uB2C8\\uD2F0 \", changableCommunities.length, \"\\uAC1C\"]\n          })\n        }), /*#__PURE__*/_jsx(CategoryContent, {\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"cards-container\",\n            children: changableCommunities.map(community => /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(Link, {\n                href: `/community/${community.id}`,\n                prefetch: false,\n                children: /*#__PURE__*/_jsx(\"a\", {\n                  children: /*#__PURE__*/_jsx(BoxStyleCard, {\n                    profilePhoto: community.profilePhoto,\n                    categoryName: community.Categories[0].name,\n                    country: community.country,\n                    communityName: community.communityName\n                  })\n                })\n              })\n            }, community.id))\n          })\n        })]\n      })\n    })]\n  });\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  const keyword = String(context.query.keyword);\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch(loadMyInfoRequestAction());\n  context.store.dispatch(searchCommunitiesRequestAction({\n    keyword\n  }));\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default /*#__PURE__*/memo(keyword);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/pages/search/[keyword].tsx"],"names":["searchCommunitiesRequestAction","loadMyInfoRequestAction","axios","AppLayout","CategoryLayout","CategoryContent","CategoryHeader","React","memo","useSelector","END","wrapper","Head","useRouter","Link","BoxStyleCard","keyword","router","changableCommunities","state","community","query","length","map","id","profilePhoto","Categories","name","country","communityName","getServerSideProps","context","cookie","req","headers","String","defaults","Cookie","store","dispatch","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import { searchCommunitiesRequestAction } from 'actions/actionCommunity';\r\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\r\nimport axios from 'axios';\r\nimport AppLayout from 'components/Layouts/AppLayout';\r\nimport CategoryLayout, {\r\n  CategoryContent,\r\n  CategoryHeader,\r\n} from 'components/Layouts/CategoryLayout';\r\nimport { RootStateInterface } from 'interfaces/RootState';\r\nimport { GetServerSideProps } from 'next';\r\nimport React, { memo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport wrapper from 'store/configureStore';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport BoxStyleCard from 'components/Cards/BoxStyleCard';\r\n\r\nfunction keyword() {\r\n  const router = useRouter();\r\n  const { changableCommunities } = useSelector(\r\n    (state: RootStateInterface) => state.community\r\n  );\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>community - {router.query.keyword} 검색</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <CategoryLayout>\r\n          <CategoryHeader>\r\n            <h1>\r\n              &ldquo;{router.query.keyword}&rdquo;와\r\n              <br />\r\n              연관있는 커뮤니티 {changableCommunities.length}개\r\n            </h1>\r\n          </CategoryHeader>\r\n          <CategoryContent>\r\n            <div className=\"cards-container\">\r\n              {changableCommunities.map(community => (\r\n                <div key={community.id}>\r\n                  <Link href={`/community/${community.id}`} prefetch={false}>\r\n                    <a>\r\n                      <BoxStyleCard\r\n                        profilePhoto={community.profilePhoto}\r\n                        categoryName={community.Categories[0].name}\r\n                        country={community.country}\r\n                        communityName={community.communityName}\r\n                      />\r\n                    </a>\r\n                  </Link>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CategoryContent>\r\n        </CategoryLayout>\r\n      </AppLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(\r\n  async context => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    const keyword = String(context.query.keyword);\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n      axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch(loadMyInfoRequestAction());\r\n    context.store.dispatch(searchCommunitiesRequestAction({ keyword }));\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n  }\r\n);\r\n\r\nexport default memo(keyword);\r\n"]},"metadata":{},"sourceType":"module"}