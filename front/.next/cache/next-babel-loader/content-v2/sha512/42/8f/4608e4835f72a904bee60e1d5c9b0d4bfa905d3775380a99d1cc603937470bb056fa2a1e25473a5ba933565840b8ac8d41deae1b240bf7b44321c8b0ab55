{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport AppLayout from 'components/Layouts/AppLayout';\nimport CommunityBody from 'components/CommunityBody';\nimport CommunityHeader from 'components/CommunityHeader';\nimport Router from 'next/router';\nimport React, { memo, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Head from 'next/head';\nvar CommunityContainer = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"id__CommunityContainer\",\n  componentId: \"sc-18byfn5-0\"\n})([\"width:100%;height:100%;background:linear-gradient(rgba(0,0,0,0.2),rgba(0,0,0,0.4)),url(\", \");background-position:center;background-size:cover;\"], function (props) {\n  return props.backgroundImage && props.backgroundImage;\n});\n\nfunction Community() {\n  var _useSelector = useSelector(function (state) {\n    return state.community;\n  }),\n      singleCommunity = _useSelector.singleCommunity,\n      loadCommunityError = _useSelector.loadCommunityError;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.post;\n  }),\n      reportDone = _useSelector3.reportDone;\n\n  var communityUser = singleCommunity === null || singleCommunity === void 0 ? void 0 : singleCommunity.Users.find(function (user) {\n    return user.id === (me === null || me === void 0 ? void 0 : me.id);\n  });\n  useEffect(function () {\n    if (loadCommunityError) {\n      Router.push('/');\n    }\n  }, [loadCommunityError]);\n  useEffect(function () {\n    if (reportDone) {\n      alert('신고를 완료했습니다');\n    }\n  }, [reportDone]);\n\n  if (!singleCommunity) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"\\uC7A0\\uC2DC \\uAE30\\uB2E4\\uB824\\uC8FC\\uC138\\uC694\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsxs(\"title\", {\n        children: [\"community - \", singleCommunity.communityName]\n      })\n    }), /*#__PURE__*/_jsx(AppLayout, {\n      children: /*#__PURE__*/_jsxs(CommunityContainer, {\n        backgroundImage: singleCommunity.profilePhoto ? singleCommunity.profilePhoto.replace(/\\/resize\\//, '/original/') : null,\n        children: [/*#__PURE__*/_jsx(CommunityHeader, {\n          singleCommunity: singleCommunity,\n          me: me,\n          communityUser: communityUser\n        }), /*#__PURE__*/_jsx(CommunityBody, {\n          singleCommunity: singleCommunity,\n          me: me,\n          communityUser: communityUser\n        })]\n      })\n    })]\n  });\n}\n\nexport var __N_SSP = true;\nexport default /*#__PURE__*/memo(Community);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/pages/community/[id].tsx"],"names":["AppLayout","CommunityBody","CommunityHeader","Router","React","memo","useEffect","useSelector","styled","Head","CommunityContainer","div","props","backgroundImage","Community","state","community","singleCommunity","loadCommunityError","user","me","post","reportDone","communityUser","Users","find","id","push","alert","communityName","profilePhoto","replace"],"mappings":";;;AAKA,OAAOA,SAAP,MAAsB,8BAAtB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AAGA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAMA,IAAMC,kBAAkB,gBAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,uJAId,UAACC,KAAD;AAAA,SAA6BA,KAAK,CAACC,eAAN,IAAyBD,KAAK,CAACC,eAA5D;AAAA,CAJc,CAAxB;;AASA,SAASC,SAAT,GAAqB;AAAA,qBAC6BP,WAAW,CACzD,UAACQ,KAAD;AAAA,WAA+BA,KAAK,CAACC,SAArC;AAAA,GADyD,CADxC;AAAA,MACXC,eADW,gBACXA,eADW;AAAA,MACMC,kBADN,gBACMA,kBADN;;AAAA,sBAIJX,WAAW,CAAC,UAACQ,KAAD;AAAA,WAA+BA,KAAK,CAACI,IAArC;AAAA,GAAD,CAJP;AAAA,MAIXC,EAJW,iBAIXA,EAJW;;AAAA,sBAKIb,WAAW,CAAC,UAACQ,KAAD;AAAA,WAA+BA,KAAK,CAACM,IAArC;AAAA,GAAD,CALf;AAAA,MAKXC,UALW,iBAKXA,UALW;;AAMnB,MAAMC,aAAa,GAAGN,eAAH,aAAGA,eAAH,uBAAGA,eAAe,CAAEO,KAAjB,CAAuBC,IAAvB,CAA4B,UAAAN,IAAI;AAAA,WAAIA,IAAI,CAACO,EAAL,MAAYN,EAAZ,aAAYA,EAAZ,uBAAYA,EAAE,CAAEM,EAAhB,CAAJ;AAAA,GAAhC,CAAtB;AAEApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,kBAAJ,EAAwB;AACtBf,MAAAA,MAAM,CAACwB,IAAP,CAAY,GAAZ;AACD;AACF,GAJQ,EAIN,CAACT,kBAAD,CAJM,CAAT;AAMAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,UAAJ,EAAgB;AACdM,MAAAA,KAAK,CAAC,YAAD,CAAL;AACD;AACF,GAJQ,EAIN,CAACN,UAAD,CAJM,CAAT;;AAMA,MAAI,CAACL,eAAL,EAAsB;AACpB,wBAAO;AAAA;AAAA,MAAP;AACD;;AAED,sBACE;AAAA,4BACE,KAAC,IAAD;AAAA,6BACE;AAAA,mCAAoBA,eAAe,CAACY,aAApC;AAAA;AADF,MADF,eAIE,KAAC,SAAD;AAAA,6BACE,MAAC,kBAAD;AACE,QAAA,eAAe,EACbZ,eAAe,CAACa,YAAhB,GACIb,eAAe,CAACa,YAAhB,CAA6BC,OAA7B,CAAqC,YAArC,EAAmD,YAAnD,CADJ,GAEI,IAJR;AAAA,gCAOE,KAAC,eAAD;AACE,UAAA,eAAe,EAAEd,eADnB;AAEE,UAAA,EAAE,EAAEG,EAFN;AAGE,UAAA,aAAa,EAAEG;AAHjB,UAPF,eAYE,KAAC,aAAD;AACE,UAAA,eAAe,EAAEN,eADnB;AAEE,UAAA,EAAE,EAAEG,EAFN;AAGE,UAAA,aAAa,EAAEG;AAHjB,UAZF;AAAA;AADF,MAJF;AAAA,IADF;AA2BD;;;AAoBD,4BAAelB,IAAI,CAACS,SAAD,CAAnB","sourcesContent":["import { END } from '@redux-saga/core';\nimport { loadCommunityRequestAction } from 'actions/actionCommunity';\nimport { loadMyInfoRequestAction } from 'actions/actionUser';\nimport { loadPostsRequestAction } from 'actions/actionPost';\nimport axios from 'axios';\nimport AppLayout from 'components/Layouts/AppLayout';\nimport CommunityBody from 'components/CommunityBody';\nimport CommunityHeader from 'components/CommunityHeader';\nimport { RootStateInterface } from 'interfaces/RootState';\nimport { GetServerSideProps } from 'next';\nimport Router from 'next/router';\nimport React, { memo, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport wrapper from 'store/configureStore';\nimport styled from 'styled-components';\nimport Head from 'next/head';\n\ninterface IBackgroundImage {\n  backgroundImage: string | null;\n}\n\nconst CommunityContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.4)),\n    url(${(props: IBackgroundImage) => props.backgroundImage && props.backgroundImage});\n  background-position: center;\n  background-size: cover;\n`;\n\nfunction Community() {\n  const { singleCommunity, loadCommunityError } = useSelector(\n    (state: RootStateInterface) => state.community\n  );\n  const { me } = useSelector((state: RootStateInterface) => state.user);\n  const { reportDone } = useSelector((state: RootStateInterface) => state.post);\n  const communityUser = singleCommunity?.Users.find(user => user.id === me?.id);\n\n  useEffect(() => {\n    if (loadCommunityError) {\n      Router.push('/');\n    }\n  }, [loadCommunityError]);\n\n  useEffect(() => {\n    if (reportDone) {\n      alert('신고를 완료했습니다');\n    }\n  }, [reportDone]);\n\n  if (!singleCommunity) {\n    return <div>잠시 기다려주세요</div>;\n  }\n\n  return (\n    <>\n      <Head>\n        <title>community - {singleCommunity.communityName}</title>\n      </Head>\n      <AppLayout>\n        <CommunityContainer\n          backgroundImage={\n            singleCommunity.profilePhoto\n              ? singleCommunity.profilePhoto.replace(/\\/resize\\//, '/original/')\n              : null\n          }\n        >\n          <CommunityHeader\n            singleCommunity={singleCommunity}\n            me={me}\n            communityUser={communityUser}\n          />\n          <CommunityBody\n            singleCommunity={singleCommunity}\n            me={me}\n            communityUser={communityUser}\n          />\n        </CommunityContainer>\n      </AppLayout>\n    </>\n  );\n}\n\nexport const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(\n  async context => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    const communityId = Number(context.query.id);\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) {\n      axios.defaults.headers.Cookie = cookie;\n    }\n    context.store.dispatch(loadMyInfoRequestAction());\n    context.store.dispatch(loadCommunityRequestAction({ communityId: communityId }));\n    context.store.dispatch(\n      loadPostsRequestAction({ communityId: communityId, postId: 0 })\n    );\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n  }\n);\n\nexport default memo(Community);\n"]},"metadata":{},"sourceType":"module"}