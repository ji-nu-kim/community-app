{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { removeCommentRequestAction, reportRequestAction } from 'actions/actionPost';\nimport React, { memo, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer } from './styles';\n\nfunction CommentSettingModal({\n  setCurrentModifyComment,\n  setEditMode,\n  postId,\n  commentId,\n  commentOwnerId,\n  communityUserId,\n  content\n}) {\n  const dispatch = useDispatch();\n  const commentOwner = commentOwnerId === communityUserId;\n  const onClickModifyButton = useCallback(() => {\n    setCurrentModifyComment(commentId);\n    setEditMode(prev => !prev);\n  }, [commentId]);\n  const onClickDeleteButton = useCallback(() => {\n    if (confirm('댓글을 지우시겠습니까?')) {\n      return dispatch(removeCommentRequestAction({\n        postId,\n        commentId\n      }));\n    }\n  }, [postId, commentId]);\n  const onClickReportButton = useCallback(() => {\n    const reason = prompt('신고하는 이유를 적어주세요');\n\n    if (reason && communityUserId) {\n      dispatch(reportRequestAction({\n        contentId: commentId,\n        reporter: communityUserId,\n        reportedPerson: commentOwnerId,\n        reason,\n        variety: 'comment',\n        content\n      }));\n    }\n  }, [commentOwnerId, communityUserId, commentId, content]);\n  return /*#__PURE__*/_jsx(ModalContainer, {\n    children: /*#__PURE__*/_jsx(\"ul\", {\n      children: commentOwner ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"li\", {\n          onClick: onClickModifyButton,\n          children: \"\\uC218\\uC815\"\n        }), /*#__PURE__*/_jsx(\"li\", {\n          onClick: onClickDeleteButton,\n          children: \"\\uC0AD\\uC81C\"\n        })]\n      }) : /*#__PURE__*/_jsx(\"li\", {\n        onClick: onClickReportButton,\n        children: \"\\uC2E0\\uACE0\\uD558\\uAE30\"\n      })\n    })\n  });\n}\n\nexport default /*#__PURE__*/memo(CommentSettingModal);","map":{"version":3,"sources":["C:/Users/wlsdn/Desktop/next/community/front/components/Modals/CommentSettingModal/index.tsx"],"names":["removeCommentRequestAction","reportRequestAction","React","memo","useCallback","useDispatch","ModalContainer","CommentSettingModal","setCurrentModifyComment","setEditMode","postId","commentId","commentOwnerId","communityUserId","content","dispatch","commentOwner","onClickModifyButton","prev","onClickDeleteButton","confirm","onClickReportButton","reason","prompt","contentId","reporter","reportedPerson","variety"],"mappings":";;;AAAA,SAASA,0BAAT,EAAqCC,mBAArC,QAAgE,oBAAhE;AACA,OAAOC,KAAP,IAA0BC,IAA1B,EAAgDC,WAAhD,QAAmE,OAAnE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;;AAYA,SAASC,mBAAT,CAA6B;AAC3BC,EAAAA,uBAD2B;AAE3BC,EAAAA,WAF2B;AAG3BC,EAAAA,MAH2B;AAI3BC,EAAAA,SAJ2B;AAK3BC,EAAAA,cAL2B;AAM3BC,EAAAA,eAN2B;AAO3BC,EAAAA;AAP2B,CAA7B,EAQ6B;AAC3B,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,YAAY,GAAGJ,cAAc,KAAKC,eAAxC;AAEA,QAAMI,mBAAmB,GAAGb,WAAW,CAAC,MAAM;AAC5CI,IAAAA,uBAAuB,CAACG,SAAD,CAAvB;AACAF,IAAAA,WAAW,CAACS,IAAI,IAAI,CAACA,IAAV,CAAX;AACD,GAHsC,EAGpC,CAACP,SAAD,CAHoC,CAAvC;AAKA,QAAMQ,mBAAmB,GAAGf,WAAW,CAAC,MAAM;AAC5C,QAAIgB,OAAO,CAAC,cAAD,CAAX,EAA6B;AAC3B,aAAOL,QAAQ,CAACf,0BAA0B,CAAC;AAAEU,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAD,CAA3B,CAAf;AACD;AACF,GAJsC,EAIpC,CAACD,MAAD,EAASC,SAAT,CAJoC,CAAvC;AAMA,QAAMU,mBAAmB,GAAGjB,WAAW,CAAC,MAAM;AAC5C,UAAMkB,MAAM,GAAGC,MAAM,CAAC,gBAAD,CAArB;;AAEA,QAAID,MAAM,IAAIT,eAAd,EAA+B;AAC7BE,MAAAA,QAAQ,CACNd,mBAAmB,CAAC;AAClBuB,QAAAA,SAAS,EAAEb,SADO;AAElBc,QAAAA,QAAQ,EAAEZ,eAFQ;AAGlBa,QAAAA,cAAc,EAAEd,cAHE;AAIlBU,QAAAA,MAJkB;AAKlBK,QAAAA,OAAO,EAAE,SALS;AAMlBb,QAAAA;AANkB,OAAD,CADb,CAAR;AAUD;AACF,GAfsC,EAepC,CAACF,cAAD,EAAiBC,eAAjB,EAAkCF,SAAlC,EAA6CG,OAA7C,CAfoC,CAAvC;AAiBA,sBACE,KAAC,cAAD;AAAA,2BACE;AAAA,gBACGE,YAAY,gBACX;AAAA,gCACE;AAAI,UAAA,OAAO,EAAEC,mBAAb;AAAA;AAAA,UADF,eAEE;AAAI,UAAA,OAAO,EAAEE,mBAAb;AAAA;AAAA,UAFF;AAAA,QADW,gBAMX;AAAI,QAAA,OAAO,EAAEE,mBAAb;AAAA;AAAA;AAPJ;AADF,IADF;AAcD;;AAED,4BAAelB,IAAI,CAACI,mBAAD,CAAnB","sourcesContent":["import { removeCommentRequestAction, reportRequestAction } from 'actions/actionPost';\nimport React, { Dispatch, memo, SetStateAction, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ModalContainer } from './styles';\n\ninterface CommentSettingModalProps {\n  setCurrentModifyComment: Dispatch<SetStateAction<number>>;\n  setEditMode: Dispatch<SetStateAction<boolean>>;\n  postId: number;\n  commentId: number;\n  commentOwnerId: number;\n  communityUserId: number;\n  content: string;\n}\n\nfunction CommentSettingModal({\n  setCurrentModifyComment,\n  setEditMode,\n  postId,\n  commentId,\n  commentOwnerId,\n  communityUserId,\n  content,\n}: CommentSettingModalProps) {\n  const dispatch = useDispatch();\n  const commentOwner = commentOwnerId === communityUserId;\n\n  const onClickModifyButton = useCallback(() => {\n    setCurrentModifyComment(commentId);\n    setEditMode(prev => !prev);\n  }, [commentId]);\n\n  const onClickDeleteButton = useCallback(() => {\n    if (confirm('댓글을 지우시겠습니까?')) {\n      return dispatch(removeCommentRequestAction({ postId, commentId }));\n    }\n  }, [postId, commentId]);\n\n  const onClickReportButton = useCallback(() => {\n    const reason = prompt('신고하는 이유를 적어주세요');\n\n    if (reason && communityUserId) {\n      dispatch(\n        reportRequestAction({\n          contentId: commentId,\n          reporter: communityUserId,\n          reportedPerson: commentOwnerId,\n          reason,\n          variety: 'comment',\n          content,\n        })\n      );\n    }\n  }, [commentOwnerId, communityUserId, commentId, content]);\n\n  return (\n    <ModalContainer>\n      <ul>\n        {commentOwner ? (\n          <>\n            <li onClick={onClickModifyButton}>수정</li>\n            <li onClick={onClickDeleteButton}>삭제</li>\n          </>\n        ) : (\n          <li onClick={onClickReportButton}>신고하기</li>\n        )}\n      </ul>\n    </ModalContainer>\n  );\n}\n\nexport default memo(CommentSettingModal);\n"]},"metadata":{},"sourceType":"module"}